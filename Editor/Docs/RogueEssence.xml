<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RogueEssence</name>
    </assembly>
    <members>
        <member name="P:RogueEssence.Content.AnimDataBase.AnimIndex">
            <summary>
            The graphics of the animation.
            </summary>
        </member>
        <member name="P:RogueEssence.Content.AnimDataBase.FrameTime">
            <summary>
            Time spent on each frame of animation, in frames (time unit)
            </summary>
        </member>
        <member name="P:RogueEssence.Content.AnimDataBase.StartFrame">
            <summary>
            The first frame of the animation, inclusive.
            -1 defaults to 0.
            </summary>
        </member>
        <member name="P:RogueEssence.Content.AnimDataBase.EndFrame">
            <summary>
            The last frame of the animation, inclusive.
            -1 defaults to the last frame possible.
            </summary>
        </member>
        <member name="P:RogueEssence.Content.AnimDataBase.AnimDir">
            <summary>
            The direction of the animation.
            </summary>
        </member>
        <member name="P:RogueEssence.Content.AnimDataBase.Alpha">
            <summary>
            Transparency.  0 for invisible, 255 for opaque.
            </summary>
        </member>
        <member name="P:RogueEssence.Content.AnimDataBase.AnimFlip">
            <summary>
            Horizontal or vertical flip effects.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.AfterImageEmitter">
            <summary>
            Creates after-images of the moving character.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.StaticAreaEmitter">
            <summary>
            Emits particles within a specified circular area.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.StaticAreaEmitter.Anims">
            <summary>
            The particles to emit.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.StaticAreaEmitter.BurstTime">
            <summary>
            Number of frames between bursts.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.StaticAreaEmitter.Range">
            <summary>
            Radius of the emitting area in pixels.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.FiniteAreaEmitter">
            <summary>
            Emits particles within a specified circular area.
            The area of emission starts at a radius of 0 and grows to a maximum range.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteAreaEmitter.Anims">
            <summary>
            The particles to emit.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteAreaEmitter.Range">
            <summary>
            The maximum radius of the emitting area.
            In Pixels
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteAreaEmitter.Speed">
            <summary>
            Speed of the radius's increase.
            In Pixels Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteAreaEmitter.TotalParticles">
            <summary>
            Total particles to emit by the time the emitter finishes.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteAreaEmitter.Layer">
            <summary>
            The draw layer to put the particles on.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.AttachAreaEmitter">
            <summary>
            Emits particles within a specified circular area, attached to a moving user or object.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachAreaEmitter.Anims">
            <summary>
            The particles to emit.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachAreaEmitter.Range">
            <summary>
            Radius of the emitting area in pixels.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachAreaEmitter.AddHeight">
            <summary>
            The amount of height to add to the particles.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachAreaEmitter.BurstTime">
            <summary>
            Number of frames between bursts.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachAreaEmitter.Layer">
            <summary>
            The draw layer to put the particles on.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.CircleSquareAreaEmitter">
            <summary>
            Emits particles within the range of the hitbox that owns it.
            The area of emission is a circle that starts at a radius of 0 and grows to the range of the square-shaped hitbox.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareAreaEmitter.Anims">
            <summary>
            The particles to emit.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareAreaEmitter.ParticlesPerTile">
            <summary>
            The amount of particles to emit per tile covered by the hitbox.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareAreaEmitter.RangeDiff">
            <summary>
            A modification to the emission radius initially supplied by the hitbox, in pixels.
            Negative numbers take the hitbox's radius and decrease it.
            Positive numbers take the hitbox's radius and increase it.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareAreaEmitter.Layer">
            <summary>
            The draw layer to put the particles on.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.BetweenEmitter">
            <summary>
            Creates an animation (Or particle emitter) behind and in front of the target sprite.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.BetweenEmitter.AnimBack">
            <summary>
            The animation or particle emitter behind the target sprite.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.BetweenEmitter.AnimFront">
            <summary>
            The animation or particle emitter in front of the target sprite.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.BetweenEmitter.HeightBack">
            <summary>
            The height of the animation or particle emitter behind the target sprite.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.BetweenEmitter.HeightFront">
            <summary>
            The height of the animation or particle emitter in front of the target sprite.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.BetweenEmitter.Offset">
            <summary>
            The number of pixels to offset both animations forward, in the direction of the animation.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.ClampEmitter">
            <summary>
            Creates two anims, separated by a width or a height, and then moves them towards each other in a clamping motion.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ClampEmitter.Anim1">
            <summary>
            Anim at the bottom.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ClampEmitter.Anim2">
            <summary>
            Anim at the top.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ClampEmitter.Offset">
            <summary>
            The number of pixels to move both animations forward, in the direction of the animation.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ClampEmitter.HalfOffset">
            <summary>
            The number of pixels to offset the bottom anim one way, and the top anim in the reverse way, before clamping them together.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ClampEmitter.HalfHeight">
            <summary>
            The number of pixels in height to move the bottom anim down, and the top anim up, before clamping them together.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ClampEmitter.LingerStart">
            <summary>
            The number of frames for animations to linger before starting the clamp.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ClampEmitter.MoveTime">
            <summary>
            The number of frames it takes for the clamp to complete from start to finish.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ClampEmitter.LingerEnd">
            <summary>
            The number of frames for animations to linger after the clamp is complete.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.BaseEmitter.Coverages">
            <summary>
            Used to keep track of where particles have previously spawned relative to the origin.  Used for balancing particle spawns.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.EmptyFiniteEmitter">
            <summary>
            An emitter that does nothing.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareEmitter.Range">
            <summary>
            In Pixels
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareEmitter.Speed">
            <summary>
            In Pixels Per Second
            </summary>
        </member>
        <member name="T:RogueEssence.Content.EmptyCircleSquareEmitter">
            <summary>
            An emitter that does nothing.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ShootingEmitter.Range">
            <summary>
            Pixels
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ShootingEmitter.Speed">
            <summary>
            Pixels per second
            </summary>
        </member>
        <member name="T:RogueEssence.Content.EmptyShootingEmitter">
            <summary>
            An emitter that does nothing.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.EmptyAttachEmitter">
            <summary>
            An emitter that does nothing.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.EmptySwitchOffEmitter">
            <summary>
            An emitter that does nothing.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.ExpandableEmitter">
            <summary>
            Emits multiple animations or particles.
            Not very used.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ExpandableEmitter.DefaultRadius">
            <summary>
            In pixels
            </summary>
        </member>
        <member name="T:RogueEssence.Content.FlashEmitter">
            <summary>
            Flashes a background image once.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.CircleSquareFountainEmitter">
            <summary>
            Emits particles within a specified range.
            Particles emitted in this manner utilize the trajectory they are fired in.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareFountainEmitter.Anims">
            <summary>
            The particles to emit.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.FiniteGatherEmitter">
            <summary>
            Emits particles at the circumference of a specified range, which all move inwards to the center.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteGatherEmitter.Anims">
            <summary>
            The particles to emit.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteGatherEmitter.UseDest">
            <summary>
            The animation will start at a cirumference that encircles the other entity being targeted.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.ListEmitter">
            <summary>
            Emits several particles or particle emitters specified in a list.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.MoveToEmitter">
            <summary>
            Creates an animation that starts at one location and moves to another.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.MoveToEmitter.Anim">
            <summary>
            The animation to create.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.MoveToEmitter.OffsetStart">
            <summary>
            The number of pixels to offset both the animation forward, in the direction of the animation.
            This will be for the starting position.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.MoveToEmitter.OffsetEnd">
            <summary>
            The number of pixels to offset both the animation forward, in the direction of the animation.
            This will be for the ending position.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.MoveToEmitter.HeightStart">
            <summary>
            The initial height the animation will appear at.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.MoveToEmitter.HeightEnd">
            <summary>
            The height that the animation will end at.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.MoveToEmitter.LingerStart">
            <summary>
            The number of frames for the animation to stay at its starting position, before moving.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.MoveToEmitter.LingerEnd">
            <summary>
            The number of frames for the animation to stay at its ending position, after moving.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.MoveToEmitter.MoveTime">
            <summary>
            The number of frames it takes to move the animation.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.MoveToEmitter.ResultAnim">
            <summary>
            The animation to play once the movement is complete.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.MoveToEmitter.ResultLayer">
            <summary>
            The layer to put the result animation in.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.FiniteOverlayEmitter">
            <summary>
            Creates an overlay effect using a background texture.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteOverlayEmitter.Anim">
            <summary>
            The background texture to show.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteOverlayEmitter.Movement">
            <summary>
            Pixels per second
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteOverlayEmitter.FadeIn">
            <summary>
            Time to fade in, in render frames.  Cuts into total time.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteOverlayEmitter.FadeOut">
            <summary>
            Time to fade out, in render frames.  Cuts into total time.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteOverlayEmitter.TotalTime">
            <summary>
            The total time the animation appears, in frames.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteOverlayEmitter.Color">
            <summary>
            The color to shift the background texture.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.OverlayEmitter.Movement">
            <summary>
            Pixels per second
            </summary>
        </member>
        <member name="T:RogueEssence.Content.FiniteReleaseRangeEmitter">
            <summary>
            Emits particles within a specified start range, which all move outwards to the maximum radius.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteReleaseRangeEmitter.Range">
            <summary>
            In Pixels
            </summary>
        </member>
        <member name="T:RogueEssence.Content.FiniteReleaseEmitter">
            <summary>
            Emits particles within a specified start range, which all move outwards until they finish animating.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteReleaseEmitter.Speed">
            <summary>
            In Pixels Per Second
            </summary>
        </member>
        <member name="T:RogueEssence.Content.AttachReleaseRangeEmitter">
            <summary>
            Emits particles within a specified start range, which all move outwards until they reach the maximum range.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachReleaseRangeEmitter.Range">
            <summary>
            In Pixels
            </summary>
        </member>
        <member name="T:RogueEssence.Content.AttachReleaseEmitter">
            <summary>
            Emits particles within a specified start range, which all move outwards until they finish animating.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachReleaseEmitter.Speed">
            <summary>
            In Pixels Per Second
            </summary>
        </member>
        <member name="T:RogueEssence.Content.CircleSquareReleaseEmitter">
            <summary>
            Emits particles within a specified start range, which all move outwards until they reach the max range specified by the hitbox.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.RepeatEmitter">
            <summary>
            An emitter that releases a single animation, or particle emitter, several times.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.RepeatEmitter.Anim">
            <summary>
            The animation to play.  Can also be an emitter.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.RepeatEmitter.Bursts">
            <summary>
            The number of times to release the animation.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.RepeatEmitter.BurstTime">
            <summary>
            The number of frames between emissions.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.RepeatEmitter.Layer">
            <summary>
            The layer to put the animation on.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.RepeatEmitter.Offset">
            <summary>
            Shifts the animation in the given number of pixels, based on the direction of the origin entity.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.ScreenRainEmitter">
            <summary>
            Emits particles falling downwards in a rain.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.SingleEmitter">
            <summary>
            A simple emitter that releases a single animation, or particle emitter.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.SingleEmitter.Offset">
            <summary>
            Shifts the animation in the given number of pixels, based on the direction of the origin entity.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.SingleEmitter.Anim">
            <summary>
            The animation to play.  Can also be an emitter.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.SingleEmitter.Layer">
            <summary>
            The layer to put the animation on.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.SingleEmitter.UseDest">
            <summary>
            Uses the other entity as the origin point of the animation, if there is one.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.SpinEmitter">
            <summary>
            Emits particles that spin around the origin in a consistent radius.
            Not very used.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.FiniteSprinkleEmitter">
            <summary>
            Emits particles within a specified circular area.
            The area of emission starts at a radius of 0 and grows to a maximum range.
            The particles themselves will move in the specified direction.
            Often used to simulate confetti-like objects that float downwards.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteSprinkleEmitter.Anims">
            <summary>
            The particles to emit.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteSprinkleEmitter.Range">
            <summary>
            The maximum radius of the emitting area.
            In Pixels
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteSprinkleEmitter.Speed">
            <summary>
            Speed of the radius's increase.
            In Pixels Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteSprinkleEmitter.TotalParticles">
            <summary>
            Total particles to emit by the time the emitter finishes.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteSprinkleEmitter.HeightSpeed">
            <summary>
            The speed for the particles to travel in height.
            In pixels per second.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteSprinkleEmitter.SpeedDiff">
            <summary>
            How far left or right the particle's trajectory will drift as it moves.
            In pixels per second.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteSprinkleEmitter.StartHeight">
            <summary>
            Height added to the particles when they are initialy created.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FiniteSprinkleEmitter.Layer">
            <summary>
            The draw layer to put the particles on.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.AttachSprinkleEmitter">
            <summary>
            Emits particles within a specified circular area, attached to a moving user or object.
            The particles themselves will move in the specified direction.
            Often used to simulate confetti-like objects that float downwards.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachSprinkleEmitter.Anims">
            <summary>
            The particles to emit.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachSprinkleEmitter.Range">
            <summary>
            Radius of the emitting area in pixels.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachSprinkleEmitter.BurstTime">
            <summary>
            Number of frames between bursts.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachSprinkleEmitter.HeightSpeed">
            <summary>
            The speed for the particles to travel in height.
            In pixels per second.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachSprinkleEmitter.SpeedDiff">
            <summary>
            How far left or right the particle's trajectory will drift as it moves.
            In pixels per second.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachSprinkleEmitter.StartHeight">
            <summary>
            The amount of height to add to the particles when they initially spawn.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.AttachSprinkleEmitter.Layer">
            <summary>
            The draw layer to put the particles on.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.CircleSquareSprinkleEmitter">
            <summary>
            Emits particles within the range of the hitbox that owns it.
            The area of emission is a circle that starts at a radius of 0 and grows to the range of the square-shaped hitbox.
            The particles themselves will move in the specified direction.
            Often used to simulate confetti-like objects that float downwards.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareSprinkleEmitter.Anims">
            <summary>
            The particles to emit.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareSprinkleEmitter.ParticlesPerTile">
            <summary>
            The amount of particles to emit per tile covered by the hitbox.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareSprinkleEmitter.HeightSpeed">
            <summary>
            The speed for the particles to travel in height.
            In pixels per second.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareSprinkleEmitter.SpeedDiff">
            <summary>
            How far left or right the particle's trajectory will drift as it moves.
            In pixels per second.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareSprinkleEmitter.StartHeight">
            <summary>
            The amount of height to add to the particles when they initially spawn.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.CircleSquareSprinkleEmitter.Layer">
            <summary>
            The draw layer to put the particles on.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.SqueezedAreaEmitter">
            <summary>
            Area Emitter but instead of a perfect circle, it is vertically squeezed into a short ellipse.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.StreamEmitter">
            <summary>
            Emits particles in a stream, traveling in the trajectory of the hitbox.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.StreamEmitter.Anims">
            <summary>
            Particles to emit.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.StreamEmitter.Shots">
            <summary>
            The number of times to repeat emitting.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.StreamEmitter.BurstTime">
            <summary>
            The number of frames between each shot.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.StreamEmitter.StartDistance">
            <summary>
            The starting distance of the emitted particle, in pixels from the origin.
            A positive number shifts the spawn to be further in the direction being fired.
            A negative number shifts it back.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.StreamEmitter.EndDiff">
            <summary>
            Modifies the end distance of the emitted particle, in pixels.
            A positive number shifts the spawn to be further in the direction being fired.
            A negative number shifts it back.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.StreamEmitter.Layer">
            <summary>
            The layer to spawn the particles in.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.SwingSwitchEmitter">
            <summary>
            Emits a particle that moves from the source to the target, with a parabolic circular motion.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.VortexEmitter">
            <summary>
            Emits particles that spin around the origin in a changing radius.
            Not very used.
            </summary>
        </member>
        <member name="T:RogueEssence.Content.WindEmitter">
            <summary>
            Emits particles traveling horizontally over the screen in varying speed.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.WindEmitter.Speed">
            <summary>
            In Pixels Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Content.FlashAnim.FadeInTime">
            <summary>
            In frames
            </summary>
        </member>
        <member name="F:RogueEssence.Content.HelixAnim.CycleSpeed">
            <summary>
            Degrees Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Content.HelixAnim.HeightSpeed">
            <summary>
            Pixels Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Content.LoopingAnim.TotalTime">
            <summary>
            In frames
            </summary>
        </member>
        <member name="F:RogueEssence.Content.LoopingAnim.FrameOffset">
            <summary>
            Time difference to start animating at
            </summary>
        </member>
        <member name="F:RogueEssence.Content.OverlayAnim.TotalTime">
            <summary>
            In frames
            </summary>
        </member>
        <member name="F:RogueEssence.Content.OverlayAnim.Movement">
            <summary>
            In pixels per second
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ParticleAnim.Speed">
            <summary>
            Pixels Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ParticleAnim.Acceleration">
            <summary>
            Pixels Per Second Per Second 
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ParticleAnim.HeightSpeed">
            <summary>
            Pixels Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Content.ParticleAnim.HeightAcceleration">
            <summary>
            Pixels Per Second Per Second 
            </summary>
        </member>
        <member name="F:RogueEssence.Content.DrawLayer.Under">
            <summary>
            Draws on the floor, behind all entities and terrain.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.DrawLayer.Bottom">
            <summary>
            Draws on the floor, behind all entities but not terrain.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.DrawLayer.Back">
            <summary>
            Draws in front of entities if placed at a higher Y coordinate, but draws behind entities in a tie.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.DrawLayer.Normal">
            <summary>
            Draws in behind of entities if placed at a lower Y coordinate, but draws in front of entities in a tie.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.DrawLayer.Front">
            <summary>
            Draws in front of entities.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.DrawLayer.Top">
            <summary>
            Draws on top of everything else.  Often used for overlay.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.DrawLayer.NoDraw">
            <summary>
            Does not draw.
            </summary>
        </member>
        <member name="M:RogueEssence.Content.BaseSheet.premultiply(Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
            <summary>
            Multiplies all colors by the alpha, or divides if reversed.
            Used to conform with XNA's particular method of rendering.
            </summary>
            <param name="tex"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:RogueEssence.Content.BaseSheet.GetCoveredRect(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Returns the rectangle bound of all nontransparent pixels within the specified bound.
            </summary>
            <param name="tex"></param>
            <param name="bounds"></param>
            <returns>Rectangle bounds relative to input bounds.</returns>
        </member>
        <member name="F:RogueEssence.Content.BattleFX.Delay">
            <summary>
            After playing this VFX, will wait this many milliseconds before moving to the next one.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.BattleFX.Sound">
            <summary>
            The sound effect of the VFX
            </summary>
        </member>
        <member name="F:RogueEssence.Content.BattleFX.Emitter">
            <summary>
            The Particle FX
            </summary>
        </member>
        <member name="F:RogueEssence.Content.BattleFX.ScreenMovement">
            <summary>
            Screen shake and other effects.
            </summary>
        </member>
        <member name="M:RogueEssence.Content.CharSheet.imgsEqual(Microsoft.Xna.Framework.Color[],Microsoft.Xna.Framework.Color[],Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Boolean)">
            <summary>
            Assume 0,0 to be the center of their respective images. Images can be of different sizes.
            </summary>
            <param name="data1"></param>
            <param name="data2"></param>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <param name="flip"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Content.CharSheet.Collapse(System.Boolean,System.Boolean)">
            <summary>
            Collapses duplicate frames together, and removes extra whitespace.
            </summary>
            <param name="ignoreOffsets">If turned on, frames with identical graphics and different offsets are treated as duplicates.</param>
            <param name="recenter">If turned on, frames will be recentered to center of actual sprite, and it will affect the animations.  Otherwise, leaves animations alone.</param>
        </member>
        <member name="M:RogueEssence.Content.CharSheet.DefaultFrame(System.Collections.Generic.List{RogueEssence.Content.CharAnimFrame})">
            <summary>
            A current frame always of 0
            </summary>
            <param name="frames"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Content.CharSheet.FractionFrame(System.Collections.Generic.List{RogueEssence.Content.CharAnimFrame},System.Int64,System.Int64,System.Boolean)">
            <summary>
            Computes the current frame based on fraction of a total time, using a specified total time.
            </summary>
            <param name="frames"></param>
            <param name="time"></param>
            <param name="totalTime"></param>
            <param name="clamp"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Content.CharSheet.TrueFrame(System.Collections.Generic.List{RogueEssence.Content.CharAnimFrame},System.Int64,System.Boolean)">
            <summary>
            Computes the current frame based on time, using the frame durations of the animation.
            </summary>
            <param name="time">Time into the animation</param>
            <param name="clamp">Whether to clamp the frame if the time exceeds the full anim time.</param>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.Content.GraphicsManager.TEX_SIZE">
            <summary>
            All textures are multiples of 8, right?
            This also controls the minimum units for a ground map.
            </summary>
        </member>
        <member name="F:RogueEssence.Content.GraphicsManager.DungeonTexSize">
            <summary>
            The size of a dungeon tile, in Tex
            </summary>
        </member>
        <member name="P:RogueEssence.Content.GraphicsManager.TileSize">
            <summary>
            The size of a dungeon tile, in pixels
            </summary>
        </member>
        <member name="F:RogueEssence.Content.GraphicsManager.ScreenWidth">
            <summary>
            The size of the game screen, which will then be stretched by the resolution settings.
            </summary>
        </member>
        <member name="P:RogueEssence.Content.GraphicsManager.Zoom">
            <summary>
            The zoom of the game map.  Only applies to ground and dungeon scenes.  Used only for debug.
            </summary>
        </member>
        <member name="P:RogueEssence.Content.GraphicsManager.WindowZoom">
            <summary>
            Game zoom based on window settings, affecting all graphics.  Independent of Zoom, which is used to zoom the map.
            </summary>
        </member>
        <member name="M:RogueEssence.Content.GraphicsManager.GetGameScreenOffset">
            <summary>
            For letterboxing
            </summary>
            <returns></returns>
        </member>
        <member name="P:RogueEssence.Content.GraphicsManager.WindowWidth">
            <summary>
            The actual size of the game window in pixels.  Used for debug drawing that doesn't try to maintain pixel-perfection.
            </summary>
        </member>
        <member name="M:RogueEssence.Content.GraphicsManager.RunConversions(RogueEssence.Content.GraphicsManager.AssetType)">
            <summary>
            Bakes all assets from the "Raw Asset" directory specified in the flags.
            </summary>
            <param name="conversionFlags">Chooses which asset type to bake</param>
        </member>
        <member name="F:RogueEssence.Dungeon.MapBG.BGMovement">
            <summary>
            Pixels per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.MapBG.Parallax">
            <summary>
            0f for no movement, 1f for movement in sync with map
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.BaseDungeonScene.viewTileRect">
            <summary>
            Rectangle of the tiles that must be drawn.
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.Character.GetDisplayName(System.Boolean)">
            <summary>
            Gets the name of the character, fully colored
            </summary>
            <param name="trueName">If set to true, uses Basename to bypass any alias or fake name.</param>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.Absentee">
            <summary>
            If turned on, this entity is considered NOT a part of the adventure for the duration of that adventure.
            </summary>
        </member>
        <member name="P:RogueEssence.Dungeon.Character.CharLoc">
            <summary>
            Position on the map grid in tiles.
            </summary>
        </member>
        <member name="P:RogueEssence.Dungeon.Character.CharDir">
            <summary>
            Character's direction.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.MustHitNext">
            <summary>
            Guaranteed to hit next attack
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.TurnWait">
            <summary>
            The number of turns this character must wait before being able to move again.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.TiersUsed">
            <summary>
            The number of turn tiers that this character has moved OR acted on.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.TurnUsed">
            <summary>
            Whether the character has made an action during this map turn.  Only one action per map turn permitted.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.ItemDisabled">
            <summary>
            Will prevent the passive item effects.  Does not prevent active use.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.IntrinsicDisabled">
            <summary>
            Prevents passive intrinsic effects
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.MovesScrambled">
            <summary>
            Will move erratically
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.WaitToAttack">
            <summary>
            The Wait command translates to attack.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.CantInteract">
            <summary>
            Can't pick up/place/equip/take items, cant interact with ground/people.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.EnemyOfFriend">
            <summary>
            Treated as a foe by friends in combat
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Character.AttackFriend">
            <summary>
            Treats friends as foes in and out of combat
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.Character.DieSilent">
            <summary>
            Makes the character disappear but also causes it to let go of its item.
            Technically should be handled by the scripts calling it.
            TODO: remove this method, after removing calls from rescue to script
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.Character.EditSkill(System.String,System.Int32,System.Boolean)">
            <summary>
            Editor-side skill changes.
            </summary>
            <param name="skillNum"></param>
            <param name="newSlot"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:RogueEssence.Dungeon.Character.DequipItem">
            <summary>
            Removes a character's held item, effectively deleting it.
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.Character.OnMapStart">
            <summary>
            Was once called independently as a part of DungeonScene.BeginFloor.
            Was refactored out to allow modifiable order between the map/game-wide events and character events.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.Character.OnMapTurnEnd(RogueEssence.Dungeon.SingleCharContext)">
            <summary>
            Currently not used.  Was once called independently as a part of DungeonScene.ProcessMapTurnEnd
            Was refactored out to allow modifiable order between the map/game-wide events and character events.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.Character.GetSeenCharacters(RogueEssence.Dungeon.Alignment)">
            <summary>
            Does not guarantee any order
            </summary>
            <param name="targetAlignment"></param>
            <returns></returns>
        </member>
        <member name="P:RogueEssence.Dungeon.Character.MapLoc">
            <summary>
            Position on the map in pixels.
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.Character.DoCleanup">
            <summary>
            Cleanup references and etc from the script engine if needed
            </summary>
        </member>
        <member name="T:RogueEssence.Dungeon.SelfAction">
            <summary>
            A hitbox that targets the self.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.SelfAction.CharAnimData">
            <summary>
            The animation the user plays when using the skill.
            </summary>
        </member>
        <member name="T:RogueEssence.Dungeon.AttackAction">
            <summary>
            A hitbox that works a melee attack.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AttackAction.HitTiles">
            <summary>
            Determines if tiles are targeted.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AttackAction.BurstTiles">
            <summary>
            Determines which tiles will trigger the explosion hitbox, as opposed to hitting the tile directly.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AttackAction.Emitter">
            <summary>
            The Particle FX to play when the 
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AttackAction.WideAngle">
            <summary>
            Determines if it hits only in front, front and sides, etc.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AttackAction.CharAnimData">
            <summary>
            The animation the user plays when using the skill.
            </summary>
        </member>
        <member name="T:RogueEssence.Dungeon.AreaAction">
            <summary>
            A hitbox that hits in an area-of-effect around the user.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AreaAction.Emitter">
            <summary>
            The Particle FX for the area effect that scales in radius to the attack's radius.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AreaAction.HitTiles">
            <summary>
            Determines if the hitbox targets tiles or not.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AreaAction.BurstTiles">
            <summary>
            Determines which tiles will trigger the explosion hitbox, as opposed to hitting the tile directly.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AreaAction.HitArea">
            <summary>
            Determines the shape of the hitbox.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AreaAction.Range">
            <summary>
            In Tiles
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AreaAction.Speed">
            <summary>
            Speed to Spread from 0 to Range in Tiles Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AreaAction.CharAnimData">
            <summary>
            The animation the user plays when using the skill.
            </summary>
        </member>
        <member name="T:RogueEssence.Dungeon.OffsetAction">
            <summary>
            A hitbox that hits a tile or area several tiles in front of the attacker.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.OffsetAction.OffsetArea.Tile">
            <summary>
            Hits only the targeted tile.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.OffsetAction.OffsetArea.Sides">
            <summary>
            Hits the targeted tile, and the tiles to the left and right of it.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.OffsetAction.OffsetArea.Area">
            <summary>
            Hits the targeted tile, and all adjacent tiles.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.OffsetAction.Emitter">
            <summary>
            The Particle FX for the area effect that scales in radius to the attack's radius.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.OffsetAction.HitTiles">
            <summary>
            Determines if the hitbox targets tiles or not.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.OffsetAction.BurstTiles">
            <summary>
            Determines which tiles will trigger the explosion hitbox, as opposed to hitting the tile directly.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.OffsetAction.HitArea">
            <summary>
            The shape of the hitbox.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.OffsetAction.Range">
            <summary>
            The number of tiles away from the attacker the hitbox appears.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.OffsetAction.Speed">
            <summary>
            Speed to Spread from 0 to Range in Tiles Per Second.  Use 0 for instant travel.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.OffsetAction.CharAnimData">
            <summary>
            The animation the user plays when using the skill.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.LinearAction.HitTiles">
            <summary>
            Determines if the hitbox targets tiles or not.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.LinearAction.Range">
            <summary>
            The range of the attack in tiles.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.LinearAction.StopAtHit">
            <summary>
            When set, will stop at the first eligible target it hits.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.LinearAction.StopAtWall">
            <summary>
            When set, will stop when it hits a wall, deploying the attack's explosion.  When unset, it will move past the wall and not explode.
            </summary>
        </member>
        <member name="T:RogueEssence.Dungeon.ProjectileAction">
            <summary>
            A projectile hitbox that is shot forward or in rays.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.RayCount.One">
            <summary>
            Shoots forward.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.RayCount.Three">
            <summary>
            Shoots forward and the diagonal sides.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.RayCount.FourCross">
            <summary>
            Shoots in an X-shape.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.RayCount.Five">
            <summary>
            Shoots in a star shape.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.RayCount.Eight">
            <summary>
            Shoots outward in 8 directions.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.Anim">
            <summary>
            The animation of the projectile being thrown.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.Emitter">
            <summary>
            The Particle FX attached to the projectile being thrown.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.StreamEmitter">
            <summary>
            The Particle FX for a stream coming out of the attacker.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.Rays">
            <summary>
            Determines how many directions the projectile is shot out in.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.Speed">
            <summary>
            Tiles per Second.  Use 0 for instant travel.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.Boomerang">
            <summary>
            If turned on, the projectile will travel back to the attacker with its hitbox still live.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.ItemSprite">
            <summary>
            Item sprites can be used for the sprite of the projectile.
            This overrides Anim.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ProjectileAction.CharAnimData">
            <summary>
            The animation the user plays when using the skill.
            </summary>
        </member>
        <member name="T:RogueEssence.Dungeon.WaveMotionAction">
            <summary>
            A beam hitbox that sweeps forward.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.WaveMotionAction.Anim">
            <summary>
            The animationf for the beam being fired.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.WaveMotionAction.Wide">
            <summary>
            Makes the beam 3 tiles wide.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.WaveMotionAction.Speed">
            <summary>
            Tiles per Second.  Use 0 for instant travel.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.WaveMotionAction.Linger">
            <summary>
            The amount of frames for the animation to linger after reaching max range.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.WaveMotionAction.CharAnimData">
            <summary>
            The animation the user plays when using the skill.
            </summary>
        </member>
        <member name="T:RogueEssence.Dungeon.ThrowAction">
            <summary>
            A hitbox that flies in an arc to hit the enemy.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ThrowAction.Anim">
            <summary>
            The animation of the projectile being thrown.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ThrowAction.Emitter">
            <summary>
            The Particle FX attached to the projectile being thrown.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ThrowAction.Range">
            <summary>
            In Tiles
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ThrowAction.Speed">
            <summary>
            Travel time of the projectile in tiles per Second.  Use 0 for instant travel.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ThrowAction.Coverage">
            <summary>
            Determines the area that the arc can target.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ThrowAction.ItemSprite">
            <summary>
            Item sprites can be used for the sprite of the projectile.
            This overrides Anim.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ThrowAction.CharAnimData">
            <summary>
            The animation the user plays when using the skill.
            </summary>
        </member>
        <member name="T:RogueEssence.Dungeon.DashAction">
            <summary>
            A hitbox that has the attacker lunge forward.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DashAction.CharAnim">
            <summary>
            The animation the user plays when using the skill.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DashAction.AppearanceMod">
            <summary>
            Visual modifier for when the dash animation is executed.
            </summary>
        </member>
        <member name="P:RogueEssence.Dungeon.CharAnimation.VisualLoc">
            <summary>
            The visual char loc.  Needed for wrapping
            </summary>
        </member>
        <member name="P:RogueEssence.Dungeon.CharAnimation.InPlace">
            <summary>
            Dashing animations will not sweep forward.
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.CharAnimation.GetLocsVisible">
            <summary>
            location that this character is in, for visibility purposes
            if any of these locations are seen by the player, the character is considered seen by the player
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.CharAnimation.GetVisionLocs">
            <summary>
            location that this character is in, for vision purposes
            any locations seen by these locs are seen by the player
            </summary>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.Dungeon.CharData.IsFounder">
            <summary>
            Cannot be removed from assembly.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.CharData.IsPartner">
            <summary>
            Cannot be removed from team.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ExplosionData.TargetAlignments">
            <summary>
            Which entities are targeted by the explosion.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ExplosionData.HitTiles">
            <summary>
            Determines if the explosion targets tiles or not.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ExplosionData.Range">
            <summary>
            The range of the explosion in Tiles.
            Skills that do not have a splash effect use 0.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ExplosionData.Speed">
            <summary>
            Speed to Spread from a radius of 0 to a radius of the explosion's max range.
            In Tiles Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ExplosionData.TileEmitter">
            <summary>
            The Particle FX that plays on each tile covered by the explosion.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ExplosionData.Emitter">
            <summary>
            The Particle FX for the explosion that scales in radius to the explosion's radius.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ExplosionData.IntroFX">
            <summary>
            VFX that plays before the explosion goes off.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ExplosionData.ExplodeFX">
            <summary>
            VFX that plays when the explosion goes off.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Hitbox.AreaLimit.Full">
            <summary>
            Hits in all directions.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Hitbox.AreaLimit.Cone">
            <summary>
            Hits the front and sides in a cone shape.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Hitbox.AreaLimit.Sides">
            <summary>
            Hits the tiles left and right of the center.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.CircleSquareHitbox.MaxRadius">
            <summary>
            Maximum Radius in Tiles
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.CircleSquareHitbox.Speed">
            <summary>
            Speed it takes from 0 to MaxRadius in Tiles Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.CircleSweepHitbox.Speed">
            <summary>
            Tiles per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.CircleSweepHitbox.MaxDistance">
            <summary>
            In tiles
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.BeamSweepHitbox.Speed">
            <summary>
            Tiles per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.BeamSweepHitbox.MaxDistance">
            <summary>
            In tiles.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.ArcingHitbox.Speed">
            <summary>
            In Tiles Per Second
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DrawEffect.None">
            <summary>
            No draw effect
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DrawEffect.Sleeping">
            <summary>
            The character uses its sleeping animation.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DrawEffect.Stopped">
            <summary>
            The character uses only the first frame of its idle animation
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DrawEffect.Shaking">
            <summary>
            Animates normally, but shaking
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DrawEffect.Charging">
            <summary>
            In a charging pose.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DrawEffect.Absent">
            <summary>
            Not drawn, but the shadow is still there.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DrawEffect.Spinning">
            <summary>
            Constantly spinning
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DrawEffect.Hurt">
            <summary>
            Constantly in pain
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DrawEffect.Transparent">
            <summary>
            Semi-transparent
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.DrawEffect.Trembling">
            <summary>
            Animates normally, but with one-pixel shake
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.DungeonScene.IterateEvents``1(RogueEssence.Dungeon.DungeonScene.EventEnqueueFunction{``0})">
            <summary>
            Iterates through all GameEvents gathered by the enqueue function, in order of priority.
            Each individual tier of priority is gathered and processed before searching for the next one.
            This is done so that GameEffects that affect other GameEffects at a further priority can take effect immediately.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enqueueFunction"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.DungeonScene.GetMatchup(RogueEssence.Dungeon.Character,RogueEssence.Dungeon.Character,System.Boolean)">
            <summary>
            Determines how the first character should treat the second character.
            </summary>
            <param name="attacker"></param>
            <param name="target"></param>
            <param name="action">Whether the alignment is for thinking (off) or for attacking (on)</param>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.Dungeon.DungeonScene.sightRect">
            <summary>
            Rectangle of the tiles that are relevant to sight computation.
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.DungeonScene.AddBrightLocs(RogueEssence.Dungeon.VisionLoc,RogueEssence.Dungeon.Map.SightRange)">
            <summary>
            Lights up tiles for graphical reasons.
            </summary>
            <param name="loc"></param>
            <param name="sight"></param>
        </member>
        <member name="M:RogueEssence.Dungeon.DungeonScene.getBorderDarkness(RogueElements.Loc,RogueElements.Rect,RogueElements.Dir8)">
            <summary>
            Gets the texture and darkness intensity of a tile's border in a certain direction.
            It is only used for tiles that are already bright.
            </summary>
            <param name="loc"></param>
            <param name="sightRect"></param>
            <param name="dir"></param>
            <returns>A visionLoc of the texture to draw, and the intensity to draw it at (the amount of darkness to add).</returns>
        </member>
        <member name="M:RogueEssence.Dungeon.DungeonScene.getBrightnessValue(RogueElements.Loc,RogueElements.Loc)">
            <summary>
            Gets the brightness of a tile, for border computation.
            </summary>
            <param name="loc"></param>
            <param name="rectStart"></param>
            <returns></returns>
        </member>
        <member name="P:RogueEssence.Dungeon.BattleContext.StrikeStartTile">
            <summary>
            the tile of the user before it started a strike (used for tipper effects)
            wrapped; it can't go out of bounds anyway
            </summary>
        </member>
        <member name="P:RogueEssence.Dungeon.BattleContext.StrikeEndTile">
            <summary>
            the tile of the user JUST AFTER it started a strike (used for updating position)
            wrapped; it can't go out of bounds anyway
            </summary>
        </member>
        <member name="P:RogueEssence.Dungeon.BattleContext.StartDir">
            <summary>
            the direcion of the user before it started a strike (used for multistrike confusion)
            unwrapped
            </summary>
        </member>
        <member name="P:RogueEssence.Dungeon.BattleContext.ExplosionTile">
            <summary>
            the origin tile for the explosion
            unwrapped
            </summary>
        </member>
        <member name="P:RogueEssence.Dungeon.BattleContext.TargetTile">
            <summary>
             the location of the tile being targeted
            unwrapped
            </summary>
        </member>
        <member name="P:RogueEssence.Dungeon.BattleContext.StrikeLandTiles">
            <summary>
            all tiles in which a strike's hitbox ended (used for item landing)
            unwrapped
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.BaseMap.ScrollEdge.Blank">
            <summary>
            Displays the BlankBG texture, or a black void if there is none
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.BaseMap.ScrollEdge.Clamp">
            <summary>
            Does not scroll past the edge of the map.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.BaseMap.ScrollEdge.Wrap">
            <summary>
            The map is wrapped around.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.BaseMap.EdgeView">
            <summary>
            Describes how to handle the map scrolling past the edge of the map
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.BaseMap.FindItemlessTile(RogueElements.Loc,RogueElements.Loc,RogueElements.Loc,System.Boolean)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="voluntary"></param>
            <returns>Unwrapped destination value.</returns>
        </member>
        <member name="M:RogueEssence.Dungeon.BaseMap.GetClampedSight(RogueElements.Rect)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.BaseMap.WrapLoc(RogueElements.Loc)">
            <summary>
            Converts out of bounds coords to wrapped-around coords.
            Based on tiles.
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.BaseMap.WrapGroundLoc(RogueElements.Loc)">
            <summary>
            Converts out of bounds coords to wrapped-around coords.
            Based on pixels.
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.BaseMap.GetLocInMapBounds(RogueElements.Loc@)">
            <summary>
            Checks to see if the loc is in map bounds.
            If it's not wrapped, expect normal results.
            If it's normally out of bounds but wrapped, the loc will be changed and the result will be true.
            </summary>
            <param name="loc">The location to test.  Will be wrapped if the map is wrapped.</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.BaseMap.GetClosestUnwrappedLoc(RogueElements.Loc,RogueElements.Loc)">
            <summary>
            
            </summary>
            <param name="loc1">Reference loc</param>
            <param name="loc2">Loc to get the closest wrap of.  May be out of bounds.</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.BaseMap.IterateLocInBounds(RogueElements.Rect,RogueElements.Loc)">
            <summary>
            Gets all wrapped locations that fit in the specified bounds.
            In tiles.
            </summary>
            <param name="rect"></param>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.Dungeon.Map.AssetName">
            <summary>
            the internal name of the map, no spaces or special characters, never localized.
            Used to refer to map data and script data for this map!
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.Map.GetCharFaction(RogueEssence.Dungeon.Character)">
            <summary>
            Gets just the character faction instead of the whole index.  Saves on performance.
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.Map.MapModified(RogueElements.Loc,RogueElements.Loc)">
            <summary>
            The region must be the region up for recalculation, NOT the changed tiles.
            </summary>
            <param name="startLoc">Unwrapped start of rectangle</param>
            <param name="sizeLoc"></param>
        </member>
        <member name="M:RogueEssence.Dungeon.Map.IterateProximityCharacters(RogueElements.Loc)">
            <summary>
            Iterate through all characters with proximity passives that touch the specified location.
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.Map.GetClosestTileForChar(RogueEssence.Dungeon.Character,RogueElements.Loc)">
            <summary>
            Gets the the acceptable warp destination for a character, as close as possible to the ideal warp destination.
            </summary>
            <param name="character">The character being moved. Null if not a character currently on the map.</param>
            <param name="loc">The ideal warp destination.</param>
            <returns>The best fit warp destination.  This value is wrapped.</returns>
        </member>
        <member name="M:RogueEssence.Dungeon.Map.OnInit">
            <summary>
            Called before the map is displayed to run script events and etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.Map.LoadScriptEvents">
            <summary>
            Search the current dungeon's lua package for defined floor callbacks functions, and add those that were found.
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.Map.RunScriptEvent(RogueEssence.Script.LuaEngine.EDungeonMapCallbacks)">
            <summary>
            Runs the specified script event for the current dungeon floor map if it exists. Or fallbacks to the dungeon set default floor event.
            </summary>
            <param name="ev">The event to run.</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.Map.DoCleanup">
             <summary>
             Call this so the map unregisters its events and delegates.
            
             </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Team.FoeConflict">
            <summary>
            If set to true, will attack/be attacked by Foe faction when in Ally faction.
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.Team.SortItems">
            <summary>
            Sorts items in the inventory STABLELY
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.AutoTile.Layers">
            <summary>
            If AutoTileSet is set to -1, this variable can be specified to make a hand-crafted texture.
            </summary>
        </member>
        <member name="P:RogueEssence.Dungeon.AutoTile.Associates">
            <summary>
            Associates are autotiles that will be considered the same as the autotile this object is using.
            Only used for texture computation, and only relevant for edge cases involving when two different autotiles meet.
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.AutoTileBase.GetLayers(System.Int32)">
            <summary>
            Gets a list of tiles to draw, based on a variant code (neighborcode + variant)
            </summary>
            <param name="variantCode"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.AutoTileBase.GetVariantCode(System.UInt64,System.Int32)">
            <summary>
            Gets a variant code based on a randomly given code and the base neighborcode.
            If the input is already a variant code (ie, upper bits are nonzero), it recomputes it.
            </summary>
            <param name="rand"></param>
            <param name="neighborCode"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dungeon.AutoTileBase.SelectTileVariant(System.UInt64,System.Int32)">
            <summary>
            Every variant is half as likely as the variant before it.
            </summary>
            <param name="rand"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.Dungeon.TerrainTile.StableTex">
            <summary>
            Prevents the texture from being overridden by the map's texturemap
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.TurnState.TurnToChar">
            <summary>
            The list of characters (represented by index) scheduled to take a turn within the current faction.
            </summary>
        </member>
        <member name="F:RogueEssence.Dungeon.Zone.scriptEvents">
            <summary>
            For containing entire dungeon-related events. (Since we can't handle some of those things inside the dungeon floors themselves)
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.Zone.SetCurrentGround(System.String)">
            <summary>
            Finds the mapname in this zone's map list, and loads it.
            </summary>
            <param name="mapname"></param>
        </member>
        <member name="M:RogueEssence.Dungeon.Zone.DevNewMap">
            <summary>
            Creates a new map of the specified name into the current zone (temporarily) for dev usage.
            </summary>
        </member>
        <member name="M:RogueEssence.Dungeon.Zone.DevLoadMap(System.String)">
            <summary>
            Loads a new map of the specified name into the current zone (temporarily) for dev usage.
            </summary>
            <param name="mapname"></param>
        </member>
        <member name="M:RogueEssence.Dungeon.Zone.DevLoadGround(System.String)">
            <summary>
            Loads a new ground map of the specified name into the current zone (temporarily) for dev usage.
            </summary>
            <param name="mapname"></param>
        </member>
        <member name="M:RogueEssence.Dungeon.Zone.DevNewGround">
            <summary>
            Creates a new ground map of the specified name into the current zone (temporarily) for dev usage.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.AITactic.Assignable">
            <summary>
            Can be assigned via tactics menu
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.HitRate">
            <summary>
            The chance of the attack hitting.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.SkillStates">
            <summary>
            Special variables that this skill contains.
            They are potentially checked against in a select number of battle events.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.BeforeTryActions">
            <summary>
            Occurs before the attacker tries to use the skill.
            If the skill is cancelled here, the turn and skill are not used.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.BeforeActions">
            <summary>
            Occurs before the attacker uses the skill.
            If the skill is cancelled here, the turn will still be passed.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.OnActions">
            <summary>
            Occurs right after the attacker uses the skill.
            The skill will have been called out, and the turn will be passed.
            In a skill with multiple strikes, this event will be called at the beginning of each strike.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.BeforeExplosions">
            <summary>
            Occurs after a tile is targeted and before it creates a splash damage hitbox.
            Can be used to alter the hitbox or redirect it.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.BeforeHits">
            <summary>
            Occurs before the target is hit.
            At this point, the target variable is available for calculations.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.OnHits">
            <summary>
            Occurs when the target is hit.
            Does not occur if the target evaded the attack.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.OnHitTiles">
            <summary>
            Occurs when the attack hits a tile.
            Can be used for terrain deformation.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.AfterActions">
            <summary>
            Occurs after all targets are hit by the skill.
            In a skill with multiple strikes, this event will be called at the end of each strike.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.ElementEffects">
            <summary>
            Modifies the elemental effect system.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.IntroFX">
            <summary>
            VFX that play target before they are hit.
            Will always play, even if the evasion roll results in a miss.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.HitFX">
            <summary>
            VFX that play when the target is hit.
            Only plays if the target is actually hit.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.BattleData.HitCharAction">
            <summary>
            Target character animation when it is hit.
            Only plays if the target is actually hit.
            </summary>
        </member>
        <member name="M:RogueEssence.Data.DataManager.GetIndex(RogueEssence.Data.DataManager.DataType)">
            <summary>
            Index paths are modified like mods.  However, if multiple mods have conflicting indices, a combined index must be generated.
            </summary>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Data.DataManager.BeginPlay(System.String,System.String,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            Starts recording the quicksave for a new adventure.
            From here on, the replayWriter will remain open as a way to continue writing game states and player inputs.
            </summary>
            <param name="filePath"></param>
            <param name="zoneId"></param>
            <param name="rogue"></param>
            <param name="seeded"></param>
            <param name="sessionStart"></param>
        </member>
        <member name="M:RogueEssence.Data.DataManager.ResumePlay(RogueEssence.Data.ReplayData,System.DateTime)">
            <summary>
            Called when resuming an adventure from a quicksave.
            The quicksave file is loaded and the stream position is set to the end, so that it can continue writing the replay.
            </summary>
            <param name="replay">The quicksave replay to resume from.</param>
            <param name="sessionResumeTime"></param>
        </member>
        <member name="M:RogueEssence.Data.DataManager.LogState">
            <summary>
            Writes the game state to the current replay.  The player must be in dungeon mode.
            This is used when the player begins a new dungeon in their adventure. (One adventure can contain a trek through multiple dungeons)
            </summary>
        </member>
        <member name="M:RogueEssence.Data.DataManager.LogGroundSave">
            <summary>
            Writes the game state to the current replay.  The player must be in ground mode.
            This is used when a player saves in the middle of an adventure in a ground mode rest area.
            </summary>
        </member>
        <member name="M:RogueEssence.Data.DataManager.LogQuicksave">
            <summary>
            Writes the entire game state for faster loading of quicksaves.
            Currently not used due to quicksaves still loading from the start of the dungeon and replaying every step up to the current point.
            </summary>
        </member>
        <member name="M:RogueEssence.Data.DataManager.LogPlay(RogueEssence.Dungeon.GameAction)">
            <summary>
            Logs a player action to the current quicksave replay.
            </summary>
            <param name="play"></param>
        </member>
        <member name="M:RogueEssence.Data.DataManager.LogUIPlay(System.Int32[])">
            <summary>
            Logs a player UI action to the current quicksave replay.
            </summary>
        </member>
        <member name="M:RogueEssence.Data.DataManager.LogUIStringPlay(System.String)">
            <summary>
            Logs a string to the current quicksave replay.  Used for name inputs.
            </summary>
        </member>
        <member name="M:RogueEssence.Data.DataManager.QueueLogUI">
            <summary>
            Starts queueing UI commands to the current replay quicksave.
            UI commands need to be queued sometimes, because they may happen mid-action for an action that may fail later.
            If a player action fails, it is not logged.  Thus, if queues didn't exist, UI actions would be logged for actions that didn't actually happen.
            </summary>
        </member>
        <member name="M:RogueEssence.Data.DataManager.DequeueLogUI">
            <summary>
            Stops queueing UI commands to the current replay quicksave and writes the current queue to the replay.
            </summary>
        </member>
        <member name="M:RogueEssence.Data.DataManager.EndPlay(RogueEssence.Data.GameProgress,System.String)">
            <summary>
            Called when an adventure is ended.  Closes the replay writing stream and saves the quicksave into a replay.
            </summary>
            <param name="epitaph"></param>
            <param name="outFile"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Data.DataManager.SaveSessionTime(System.TimeSpan)">
            <summary>
            Saves the current session time
            </summary>
            <param name="sessionTime"></param>
        </member>
        <member name="M:RogueEssence.Data.DataManager.SuspendPlay">
            <summary>
            Called when an adventure is suspended.  Closes the replay writing stream to allow for clean exit.
            Note how nothing else is done aside form closing the stream.
            Quicksaves already save every action from the player as it happens, so even if they closed the game there is no lost data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Data.DataManager.LoadMainGameState(System.Boolean)">
            <summary>
            Returns game progress and current zone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Data.DataManager.DeleteReplayData(System.Boolean)">
            <summary>
            Deletes replays from the replay folder corresponding to the current mod.
            </summary>
            <param name="includeFav">Favorites will be deleted too.</param>
        </member>
        <member name="M:RogueEssence.Data.EntryDataIndex.GetMappedKeys">
            <summary>
            Maps one index to one key.
            </summary>
            <returns>List may contain null.</returns>
        </member>
        <member name="M:RogueEssence.Data.EntryDataIndex.GetOrderedKeys(System.Boolean)">
            <summary>
            Keys ordered alphabetically or numerically
            </summary>
            <param name="numeric"></param>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.Data.GameProgress.SessionTime">
            <summary>
            The total play time from past sessions.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.GameProgress.SessionStartTime">
            <summary>
            The time when the current session was started.
            </summary>
        </member>
        <member name="M:RogueEssence.Data.GameProgress.UpdateOptions">
            <summary>
            Updates the game-relevant options to the settings.
            Called whenever the settings change in a currently running game.
            Called whenever a new game is started, in order to inherit the existing settings.
            Called whenever a game is resumed, to update the settings to those that may have changed.
            DO NOT call when a replay is started.  Not that it would do anything...
            DO NOT call if a replay is in progress.  Not that it would do anything...
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Data.GameProgress.BeginSession">
            <summary>
            Begin counting play time for session
            </summary>
        </member>
        <member name="M:RogueEssence.Data.GameProgress.EndSession">
            <summary>
            Stops counting play time for the end of an adventure or suspending via quicksave
            </summary>
        </member>
        <member name="M:RogueEssence.Data.GameProgress.ResumeSession(RogueEssence.Data.ReplayData)">
            <summary>
            Loads play time from replay data
            resume counting play time by setting the sesion start
            </summary>
        </member>
        <member name="M:RogueEssence.Data.GameProgress.LoadedWithoutQuicksave">
            <summary>
            Executed when the save file is loaded without a quicksave.  Check and clear all quicksave-related variables.
            </summary>
        </member>
        <member name="M:RogueEssence.Data.GameProgress.RestrictLevel(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="zone"></param>
            <param name="capOnly">Will force lower level to specified level if false.</param>
            <param name="permanent"></param>
            <param name="silent"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Data.GameProgress.RestrictCharLevel(RogueEssence.Dungeon.Character,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="character"></param>
            <param name="level"></param>
            <param name="capOnly">Will force lower level to specified level if false.</param>
        </member>
        <member name="M:RogueEssence.Data.GameProgress.ClearDungeonItems">
            <summary>
            Removes cursed and hidden values from items after leaving dungeon mode.
            </summary>
        </member>
        <member name="M:RogueEssence.Data.GameProgress.IsOldVersion">
            <summary>
            Returns true if
            Game version is higher than save's game version
            Quest is different
            Quest version is higher than save's quest version
            Mods are added or removed
            Mod version is higher than the save's mod version
            </summary>
            <returns></returns>
        </member>
        <member name="P:RogueEssence.Data.IDescribedData.Desc">
            <summary>
            The description of the asset as the player sees it, including translations.
            </summary>
        </member>
        <member name="T:RogueEssence.Data.IEntryData">
            <summary>
            All classes that represent indexed data such as monsters, items, etc. implement this class.
            This is used for editor lists that need to load the names of all monsters, items, etc. without actually loading all data files.
            Also for localization.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.IEntryData.Name">
            <summary>
            The name of the asset as the player sees it, including translations.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.IEntryData.Released">
            <summary>
            If released, this asset can be found/accessed in the game.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.IEntryData.Comment">
            <summary>
            Developer-only comments for this asset.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.Sprite">
            <summary>
            How the item looks in the game.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.Icon">
            <summary>
            The icon displayed next to the item's name.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.Price">
            <summary>
            How much the item sells for.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.Rarity">
            <summary>
            The rarity rating of the item.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.MaxStack">
            <summary>
            The maximum amount a single slot of this item can be stacked.
            0 is unstackable.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.CannotDrop">
            <summary>
            Cannot be manually dropped, cannot be lost, cannot be stolen.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.BagEffect">
            <summary>
            Determines whether the item activates in bag or on equip.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.ItemStates">
            <summary>
            Special variables that this item contains.
            They are potentially checked against in a select number of battle events.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.UseAction">
            <summary>
            The hitbox of the attack that comes out when the item is used.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.Explosion">
            <summary>
            The splash effect that is triggered for each target of the UseAction hitbox.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.UseEvent">
            <summary>
            The effects of using the item.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.UsageType">
            <summary>
            Define whether this is a food, drink, etc for the proper sound/animation on use
            "None" and "ammo" will prevent use, but UseEffect can still be triggered by throwing it.
            This means that throw effect is the same as use effect.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.ArcThrow">
            <summary>
            Defines whether this item flies in an arc or in a straight line.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.BreakOnThrow">
            <summary>
            Defines whether this item will disappear if thrown, even if it doesnt hit a target.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ItemData.ThrowAnim">
            <summary>
            Defines the custom graphics for the item when it is thrown.
            Set to an empty anim to use the item's own sprite.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.MonsterData.EXPTable">
            <summary>
            How fast this unit levels up.  Uses the Growth Group EXP tables.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnEquips">
            <summary>
            Triggered when the character equips an item.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnPickups">
            <summary>
            Triggered when the character picks up an item.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.BeforeStatusAdds">
            <summary>
            Occurs before a status condition is added to the player.
            Can be used to cancel the operation.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnStatusAdds">
            <summary>
            Occurs after a status condition is added to the player.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnStatusRemoves">
            <summary>
            Occurs after a status condition is removed from the player.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnMapStatusAdds">
            <summary>
            Occurs after a status condition is added to the map.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnMapStatusRemoves">
            <summary>
            Occurs after a status condition is removed from the map.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnMapStarts">
            <summary>
            Occurs when the map starts, or when the character is spawned.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnTurnStarts">
            <summary>
            Occurs when the character's turn begins.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnTurnEnds">
            <summary>
            Occurs when the character's turn ends.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnMapTurnEnds">
            <summary>
            Occurs when the map's global turn ends.
            Distinct from character turn ends because a character may move multiple times a turn.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnWalks">
            <summary>
            Occurs when the character walks.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnDeaths">
            <summary>
            Occurs when the character dies.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnRefresh">
            <summary>
            Occurs whenever the character's features need to be updated.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.BeforeTryActions">
            <summary>
            Occurs before the character attempts a battle action,
            such as attacking, using an item, activating a tile, etc.
            Cancelling the action at this phase prevents the turn from completing.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.BeforeActions">
            <summary>
            Occurs before the character executes a battle action,
            such as attacking, using an item, activating a tile, etc.
            Cancelling the action at this phase will still result in the turn completing.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnActions">
            <summary>
            Occurs after the character initiates the battle action.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.BeforeHittings">
            <summary>
            Before the character hits a target in a battle action.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.BeforeBeingHits">
            <summary>
            Before the character gets hit in a battle action.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.AfterHittings">
            <summary>
            After the character hits a target in a battle action.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.AfterBeingHits">
            <summary>
            After the character gets hit in a battle action.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.OnHitTiles">
            <summary>
            Effects for when the character hits a tile in a battle action.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.AfterActions">
            <summary>
            Occurs after the character finishes the battle action.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.UserElementEffects">
            <summary>
            Modifies the elemental effect system when attacking.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.TargetElementEffects">
            <summary>
            Modifies the elemental effect system when being targeted by an attack.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.ModifyHPs">
            <summary>
            Used to modify HP regen values.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.PassiveData.RestoreHPs">
            <summary>
            Used to modify healing events.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ProximityData.Radius">
            <summary>
            The radius of the effect.
            DO NOT SET THIS OVER 5.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ProximityData.TargetAlignments">
            <summary>
            Who it affects.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ProximityData.BeforeExplosions">
            <summary>
            Triggers before a hitbox explodes for an affected character in radius of effect.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ProximityPassive.ProximityEvent">
            <summary>
            The passive effect applied to entities near the character with this effect.
            DO NOT ADD ANYTHING TO A PROXIMITY PASSIVE'S ONREFRESH
            </summary>
        </member>
        <member name="M:RogueEssence.Data.RecordHeaderData.LoadHighScores">
            <summary>
            Generate all high score tables in real time, organized by dungeon, by going through all replays
            </summary>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.Data.Serializer.OldVersion">
            <summary>
            A value that is temporarily set when deserializing a data object, serving as a global old version for converters in UpgradeConverters.cs to recognize the version.
            A bit hacky, but is currently the only way for converters to recognize version.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.SkillData.BaseCharges">
            <summary>
            The number of times the skill can be used.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.SkillData.Strikes">
            <summary>
            How many times the skill attacks.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.SkillData.HitboxAction">
            <summary>
            Data on the hitbox of the attack.  Controls range and targeting.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.SkillData.Explosion">
            <summary>
            Optional data to specify a splash effect on the tiles hit.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.SkillData.Data">
            <summary>
            Events that occur with this skill.
            Before it's used, when it hits, after it's used, etc.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.StatusData.MenuName">
            <summary>
            Determines if it shows up in the status menu.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.StatusData.CarryOver">
            <summary>
            Determines if the status stays when changing floors.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.StatusData.Emoticon">
            <summary>
            The icon that appears over the character's head when they have the status.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.StatusData.DropEmoticon">
            <summary>
            The icon that appears over the character's head when they have this status with a stack below 0
            </summary>
        </member>
        <member name="F:RogueEssence.Data.StatusData.FreeEmote">
            <summary>
            Icon that appears on the character's body when they have the status.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.StatusData.DrawEffect">
            <summary>
            Special visual effects applied to the character with this status.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.StatusData.Targeted">
            <summary>
            Will keep track of the character that inflicted the status.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.StatusData.StatusStates">
            <summary>
            Special variables that this status contains.
            They are potentially checked against in a select number of battle events.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.StatusData.OnSkillChanges">
            <summary>
            Event for when the character's skills are changed or swapped around.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.StatusData.TargetPassive">
            <summary>
            Passive effects applied to the character that inflicted the status.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.TileData.Layer">
            <summary>
            The layer to draw the tile on.  Only supports Bottom, Back and Front for now.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.TileData.BlockItem">
            <summary>
            Prevents items from landing on it.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.TileData.Destructible">
            <summary>
                Allows the tile to be destroyed by certain attacks.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.TileData.EffectiveElements">
            <summary>
                Any supereffective move used against this tile will destroy it.  If this is none, any attack will destroy it.  Only used if Destructible is true.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.TileData.PowerNeededToDestroy">
            <summary>
                The minimum damage needed to destroy the tile.  Only used if Destructible is true.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.TileData.OnTileDestroyed">
            <summary>
                Triggers right before the tile is destroyed by certain attacks.  Only used if Destructible is true.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.RogueStatus.None">
            <summary>
            Disallowed for Rogue mode.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.RogueStatus.NoTransfer">
            <summary>
            Allowed for rogue mode, cannot transfer anything.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.RogueStatus.ItemTransfer">
            <summary>
            Allowed for rogue mode, can only transfer items to main save.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.RogueStatus.AllTransfer">
            <summary>
            Allowed for rogue mode, can transfer items and characters to main save.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.NoEXP">
            <summary>
            Turn on to disable EXP gain in the dungeon.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.Level">
            <summary>
            The recommended level to face the dungeon.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.LevelCap">
            <summary>
            Turn on to cap the team at the recommended level.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.TeamRestrict">
            <summary>
            Turn on to force the player to enter with 1 team member.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.TeamSize">
            <summary>
            Overrides the normal maximum team size.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.MoneyRestrict">
            <summary>
            Forces all money to be stored on entry.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.BagRestrict">
            <summary>
            Forces items beyond the Nth slot to be stored upon entry.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.BagSize">
            <summary>
            Forces the bag's maximum size.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.Persistent">
            <summary>
            Turn this on for the zone to remember map layouts and load the old state when returning to the floor.
            It's not nice on memory though...
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.Rescues">
            <summary>
            Rescues allowed for this zone.
            </summary>
        </member>
        <member name="P:RogueEssence.Data.ZoneData.Rogue">
            <summary>
            Determines if the dungeon can be played in Rogue mode, and what can be transferred.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ZoneData.Segments">
            <summary>
            Sections of the dungeon.
            Ex. Splitting the dungeon into a normal and deeper section.
            </summary>
        </member>
        <member name="F:RogueEssence.Data.ZoneData.GroundMaps">
            <summary>
            Ground maps associated with this dungeon.
            Ex. Cutscene rooms for pre-boss events.
            </summary>
        </member>
        <member name="T:RogueEssence.Data.BaseTemplate">
            <summary>
            Base class for templates
            </summary>
        </member>
        <member name="T:RogueEssence.Data.ObjectTemplate">
            <summary>
            Object templates contains data to build basically a perfect clone of an object. Its literally a template.
            Its meant to allow mappers and scripters to quickly instantiate recurring ground objects.
            </summary>
        </member>
        <member name="T:RogueEssence.Data.CharacterTemplate">
            <summary>
            Character templates contains data to build basically a perfect clone of a charater. Its literally a template.
            Its meant to allow mappers and scripters to quickly instantiate recurring ground characters.
            </summary>
        </member>
        <member name="T:RogueEssence.Data.TemplateManager">
            <summary>
            This handles all templates for the game, and handle serialization for them too!
            </summary>
        </member>
        <member name="F:RogueEssence.Data.TemplateManager.m_objTemplates">
            <summary> Returns the current instance of the TemplateManager. Its instantiated when this property is first accessed.</summary>
        </member>
        <member name="M:RogueEssence.Data.TemplateManager.SetTemplate(System.String,RogueEssence.Data.BaseTemplate)">
            <summary>
            Assign or insert a template into the manager.
            </summary>
            <param name="templatename"></param>
            <param name="templ"></param>
        </member>
        <member name="M:RogueEssence.Data.TemplateManager.FindTemplate(System.String)">
            <summary>
            Find a named template in the list of global templates and returns the basetemplate.
            </summary>
            <param name="name">Name of the template to find.</param>
            <returns>BaseTemplate found, or null if not found.</returns>
        </member>
        <member name="M:RogueEssence.Dev.DevHelper.RunIndexing(RogueEssence.Data.DataManager.DataType)">
            <summary>
            Bakes all assets from the "Work files" directory specified in the flags.
            </summary>
            <param name="conversionFlags">Chooses which asset type to bake</param>
        </member>
        <member name="T:RogueEssence.Dev.DtefImportHelper">
            Autotile / tile importer for dungeon tiles in the Dungeon Tile Exchange Format.
        </member>
        <member name="F:RogueEssence.Dev.DtefImportHelper.FieldDtefMapping">
            This maps the internal tile IDs to the order in the DTEF templates:
        </member>
        <member name="M:RogueEssence.Dev.ImportHelper.SaveTileSheet(System.Collections.Generic.List{RogueEssence.Content.BaseSheet[]},System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="tileList">A list of arrays of Basesheets.  Array members will be arranged vertically.  List members horizontally.</param>
            <param name="destFile"></param>
            <param name="tileSize"></param>
        </member>
        <member name="M:RogueEssence.Dev.ImportHelper.ImportAllNameDirs(System.String,System.String)">
            <summary>
            Bakes all multi-directional spritesheets specified in the directory.
            </summary>
            <param name="sourceDir">Parent directory of the input files.</param>
            <param name="cachePattern">Pattern expression to save the output files as.</param>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.GetSerializableMembers(System.Type)">
            <summary>
            Gets all public fields, properties that have backing fields (auto-implemented properties), and private fields.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.GetEditableMembers(System.Type)">
            <summary>
            Gets all public fields, and properties that have backing fields (auto-implemented properties)
            Does not get private fields.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.GetBaseTypeArg(System.Type,System.Type,System.Int32)">
            <summary>
            Use case: Child type inherits from generic parent type.  What generic argument did it use for the parent?
            This method finds the answer.
            </summary>
            <param name="child"></param>
            <param name="parent"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.GetTypesFromConstraints(System.Type[],System.Type[])">
            <summary>
            Works like GetAssignableTypes, but does not recurse into template types.
            </summary>
            <param name="parentTemplateTypes"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.getAssignableFromDerivedToConstraint(System.Collections.Generic.List{System.Type[]},System.Type,System.Type,System.Int32)">
            <summary>
            
            </summary>
            <param name="satisfyingConstraints"></param>
            <param name="derived">Does not contain generic parameters</param>
            <param name="constraint">May contain generic parameters</param>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.getAssignableFromGeneric(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="parent">Any generic type</param>
            <param name="child">A non-constructed generic type</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.IsGenericEqual(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="type1">A type that may be non-generic or a non-constructed generic.</param>
            <param name="type2">A type that may be non-generic or a constructed generic.</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.recurseTypeParamConstraints(System.Collections.Generic.List{System.Type},System.Int32,System.Int32,System.Reflection.Assembly[],System.Type,System.Type[],System.Type[],System.Int32)">
            <summary>
            Takes a non-constructed generic type and gets all possible constructions via recursion.
            Constructed types are added to the children parameter.
            </summary>
            <param name="children">The full list of child classes to the original type used in GetAssignableTypes</param>
            <param name="recursionDepth"></param>
            <param name="searchAssemblies"></param>
            <param name="checkType"></param>
            <param name="checkArgs"></param>
            <param name="chosenParams"></param>
            <param name="openTypes"></param>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.hasOpenConstraint(System.Type[],System.Type[])">
            <summary>
            Check to see if the constraints are unassigned generic type arguments, or non-constructed generic types
            </summary>
            <param name="chosenParams"></param>
            <param name="constraints"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.isOpenConstraint(System.Type[],System.Type)">
            <summary>
            Check to see if the constraint is an unassigned generic type argument, or a non-constructed generic type.
            </summary>
            <param name="chosenParams"></param>
            <param name="tConstraint"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Dev.ReflectionExt.recurseTypeParams(System.Collections.Generic.List{System.Type},System.Int32,System.Int32,System.Reflection.Assembly[],System.Type,System.Type[],System.Type[],System.Int32,System.Type[][],System.Int32)">
            <summary>
            Takes a jagged array of types that serve as candidates for the unconstructed generic type and adds all combinations to the children list.
            </summary>
            <param name="children"></param>
            <param name="recursionDepth"></param>
            <param name="searchAssemblies"></param>
            <param name="checkType">The uconstructed generic type</param>
            <param name="checkArgs"></param>
            <param name="chosenParams"></param>
            <param name="openTypes"></param>
            <param name="possibleParams">THe jagged array of types</param>
            <param name="paramIndex"></param>
        </member>
        <member name="M:RogueEssence.DiagManager.LogError(System.Exception,System.Boolean)">
            <summary>
            Logs an error to console and output log.  Puts out the entire stack trace including inner exceptions.
            </summary>
            <param name="exception">THe exception to log.</param>
            <param name="signal">Triggers On-Error code if true.  Logs silently if not.</param>
        </member>
        <member name="T:RogueEssence.GameBase">
            <summary>
            This is the main type for your game
            </summary>
        </member>
        <member name="M:RogueEssence.GameBase.Initialize">
            <summary>
            Allows the game to perform any initialization it needs to before starting to run.
            This is where it can query for any required services and load any non-graphic
            related content.  Calling base.Initialize will enumerate through any components
            and initialize them as well.
            </summary>
        </member>
        <member name="M:RogueEssence.GameBase.LoadContent">
            <summary>
            LoadContent will be called once per game and is the place to load
            all of your content.
            </summary>
        </member>
        <member name="M:RogueEssence.GameBase.UnloadContent">
            <summary>
            UnloadContent will be called once per game and is the place to unload
            all content.
            </summary>
        </member>
        <member name="M:RogueEssence.GameBase.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Allows the game to run logic such as updating the world,
            checking for collisions, gathering input, and playing audio.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:RogueEssence.GameBase.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="T:RogueEssence.Ground.BaseTaskUser">
            <summary>
            class to implement to add basic task handling to an entity
            </summary>
        </member>
        <member name="T:RogueEssence.Ground.BaseTaskUser.EThink">
            <summary>
            Represents how this entity's think function should be handled!
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.BaseTaskUser.ThinkType">
            <summary>
            Contains the type of thinking this entity does
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.BaseTaskUser.Task">
            <summary>
            Current task
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.BaseTaskUser.SetTask(RogueEssence.Ground.GroundTask)">
            <summary>
            Set the entity's current task to the one specified in parameters.
            Only sets the task if the current one is finished!
            </summary>
            <param name="task">New task to set as current task</param>
            <returns>Returns false if the entity is still running a task! And true if the task was properly set!</returns>
        </member>
        <member name="M:RogueEssence.Ground.BaseTaskUser.WaitSetTask(RogueEssence.Ground.GroundTask)">
            <summary>
            This function waits until the current task is done before setting the new task.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.BaseTaskUser.CurrentTask">
            <summary>
            Return the current task, or null if no task is set!
            </summary>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Ground.IdleAnimGroundAction">
             <summary>
             A generic GroundAction that makes a groundchar play an animation and loops forever.
            
             NOTE: I just made this as a concept class to demonstrate how we could allow script users to run animations on demand on groundchars.
             </summary>
        </member>
        <member name="T:RogueEssence.Ground.GroundAI">
            <summary>
            Base class implementation of GroundMode AI
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundAI.CurrentState">
            <summary>
            State index the AI is currently in
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundAI.EntityPointer">
            <summary>
            Pointer to the GroundEntity that inherits this.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundAI.OnMapInit">
            <summary>
            This method handles initializing the AI, if needed, when a map is run.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundAI.UpdateAI">
            <summary>
            The AI will perform all its necessary operations in this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundAI.ForceState(System.String)">
            <summary>
            Force the AI to change to the specified state if it exists
            </summary>
            <param name="statename"></param>
        </member>
        <member name="T:RogueEssence.Ground.GroundAIUser">
            <summary>
            A base class for anything using an AI.
            The AI requires the entity to use Tasks, so the base class is BaseTaskUser.
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundAIUser.AI">
            <summary>
            AI container
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundAIUser.IsInteracting">
            <summary>
            Whether the entity is busy interacting, and should act accordingly
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundAIUser.AIEnabled">
            <summary>
            Whether the AI is enabled or disabled for this entity
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundAIUser.SetAI(RogueEssence.Ground.GroundAI)">
            <summary>
            Sets the AI to use.
            </summary>
            <param name="ai"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundAIUser.SetAIState(System.String)">
            <summary>
            Sets the AI state.
            </summary>
            <param name="ai"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundAIUser.hasAI">
            <summary>
            Whether the entity has currently an AI set!
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundAIUser.OnMapInit">
            <summary>
            This should be called on map init so the AI can be initialized
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundAIUser.UpdateAI">
            <summary>
            This method is reponsible for handling AI processing.
            The states also handle tasks themselves
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundAIUser.Think">
            <summary>
            Reimplemented think method to take into account AI.
            Think shouldn't be blocking by definition. Anything blocking should be run as a task, or game action.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundChar.UpdateView(RogueEssence.FrameTick)">
            <summary>
            Update for editor view
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundChar.GetDisplayName">
            <summary>
            Returns the localized nickname if there's one, or the specie name, fully colored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundChar.OnDeserializeMap(RogueEssence.Ground.GroundMap)">
            <summary>
            Called by the map owning this entity after being deserialized to have it set itself up.
            </summary>
            <param name="map"></param>
        </member>
        <member name="T:RogueEssence.Ground.GroundDebug">
            <summary>
            Class with handy methods for drawing debug and editor stuff.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundScene.SilentSendHome(System.Int32)">
            <summary>
            Sends a team member home without affecting the ground map.
            </summary>
            <param name="index">Index of team member.</param>
            <param name="front">Whether to put the team member in front or in back of the assembly list.</param>
        </member>
        <member name="M:RogueEssence.Ground.GroundScene.SilentAddToTeam(System.Int32)">
            <summary>
            Adds a team member from the assembly to the team without affecting the ground map.
            </summary>
            <param name="index">Index of assembly member.</param>
        </member>
        <member name="T:RogueEssence.Ground.GroundScriptedAI">
            <summary>
            Implementation of the GroundAI that works using AI templates defined inside lua scripts.
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundScriptedAI.CurrentState">
            For this property, we want to wrap  it around accessing the luatable of the current AI template instance!
        </member>
        <member name="P:RogueEssence.Ground.GroundScriptedAI.LastState">
            <summary>
            Look at the AI instance class to get the last state
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundScriptedAI.NextState">
            <summary>
            Look at the AI template instance to get the next state
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundScriptedAI.m_AITemplate">
            <summary>
            An instance of the lua AI Template currently being used.
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundScriptedAI.m_AICoro">
            <summary>
            Keeps a reference on the AI iterator.
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundScriptedAI.m_AIClasspath">
            <summary>
            Holds the current classpath to the AI to run, so when de-serializing we can reload the proper AI.
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundScriptedAI.m_Arguments">
            <summary>
            Holds the arguments issued to the AI constructor
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundScriptedAI.m_fnUpdate">
            <summary>
            The AI's update function is cached+compiled in here.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundScriptedAI.#ctor(System.String,System.Object[])">
            <summary>
            Constructor for the ground scripted AI which takes a path to the lua class to instantiate and use as AI Template.
            </summary>
            <param name="luaAIclasspath"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundScriptedAI.InstantiateAI">
            <summary>
            Instanciate the AI module we're set to use for this entity, and keep the instance in m_AITemplate.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundScriptedAI.GetAIFunction(System.String)">
            <summary>
            Copy the AI's given function, and return it.
            </summary>
            <param name="fname"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundScriptedAI.RunAIUpdateFun">
            <summary>
            Runs one of the functions
            </summary>
            <param name="funname"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Ground.GroundSpawner">
            <summary>
            Class representing an NPC spawner on a ground map. Its meant to randomly create an NPC at runtime, and is controlled via script.
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundSpawner.NPCName">
            <summary>
            Name of the NPC that will be spawned by this spawner
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundSpawner.NPCChar">
            <summary>
            The "Character" entity from which the NPC will be generated.
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundSpawner.curNpc">
            <summary>
            The NPC that was spawned by this spawner
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundSpawner.EntityCallbacks">
            <summary>
            The Callbacks that will be enabled on the spawned entity
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundSpawner.#ctor(System.String,System.String,RogueEssence.Dungeon.CharData)">
            <summary>
            Creates a NPC Spawner entity with the given name, NPC name and character entity.
            </summary>
            <param name="spawnername">name given to the spawner entity</param>
            <param name="npcname">name given to the spawned entity</param>
            <param name="npcchar">character entity from which the NPC will be generated from</param>
        </member>
        <member name="M:RogueEssence.Ground.GroundSpawner.Spawn(RogueEssence.Ground.GroundMap)">
            <summary>
            Generates the NPC and place it at the location the spawner is on the map.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundSpawner.AddSpawnedEntScriptEvent(RogueEssence.Script.LuaEngine.EEntLuaEventTypes)">
            <summary>
            Add a script event to be assigned to the spawned entity.
            </summary>
            <param name="ev"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundSpawner.RemoveSpawnedEntScriptEvent(RogueEssence.Script.LuaEngine.EEntLuaEventTypes)">
            <summary>
            Removes a script event from the list of events to be assigned to the spawned entity
            </summary>
            <param name="ev"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundSpawner.IterateSpawnedEntScriptEvents">
            <summary>
            Iterates the list of entity callbacks enabled
            </summary>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Ground.GroundTask">
            <summary>
            Represents a task that a ground entity should execute.
            Its meant to allow several entities to perform a task simultaneously, and offer a status update to the user.
            </summary>
        </member>
        <member name="T:RogueEssence.Ground.GroundTask.EStatus">
            <summary>
            Possible states for the task to be in.
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundTask.Status">
            <summary>
            Current status of the task. Changes as the task is processed.
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundTask.m_bInteruptTask">
            <summary>
            When this boolean is set to true, the task will be force stopped on the next yield.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundTask.Finished">
            <summary>
            Returns whether the task is done running, regardless of whether it errored or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundTask.Completed">
            <summary>
            Return true only if the task finished with the Completed status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundTask.ForceStop">
            <summary>
            Force the currently running task to stop on the next yield instruction.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundTask.CreateTaskEnumerator(RogueEssence.Ground.GroundEntity)">
            <summary>
            Create the enumerator to be run by the Run function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundTask.TaskName">
            <summary>
            Returns a name for the task
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundTask.Run(RogueEssence.Ground.GroundEntity)">
            <summary>
            Wraps the execution of the task
            Automatically sets the execution status.
            </summary>
            <param name="ent">Entity running the task.</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundTask.Wait">
            <summary>
            This waits until the task has been executed. Its mainly meant to be called by the script engine via a lua yield.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundTask._Wait">
            <summary>
            Internal version of the script exposed Wait function.
            Since Interface types like IEnumerator lose their meaning when passed through lua, it has to be wrapped in a coroutine.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Ground.GroundNativeTask">
            <summary>
            Implementation of a Ground task via native code.
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundNativeTask.Task">
            <summary>
            The task itself is a TransientScriptEvent.
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundNativeTask.m_taskname">
            <summary>
            The name assigned to this task.
            </summary>
        </member>
        <member name="T:RogueEssence.Ground.GroundScriptedTask">
            <summary>
            Variant of a task that runs a lua function!
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundScriptedTask.Task">
            <summary>
            The task itself is a TransientScriptEvent.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundScriptedTask.#ctor(RogueEssence.Script.TransientScriptEvent)">
            <summary>
            Constructor, takes a script event and run it as a task!
            </summary>
            <param name="ev">The TransientScriptEvent that runs the task.</param>
        </member>
        <member name="M:RogueEssence.Ground.GroundScriptedTask.#ctor(NLua.LuaFunction)">
            <summary>
            Constructor, takes a lua function.
            </summary>
            <param name="fun">Lua function running the task.</param>
        </member>
        <member name="M:RogueEssence.Ground.AnimLayer.FindAnimsAtPosition(RogueElements.Loc)">
            <summary>
            Convenience method for locating an anim on that map at the
            position specified.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.Ground.EntityLayer.TemporaryChars">
            <summary>
            Field for character entities that should not be serialized
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.EntityLayer.TemporaryObjects">
            <summary>
            Field for object entities that should not be serialized
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.EntityLayer.Spawners">
            <summary>
            Contains a list of all the NPCs spawners on this map
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.EntityLayer.Markers">
            <summary>
            A list of ground markers.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.EntityLayer.IterateEntities">
            <summary>
            Allow iterating through all entities on the map,
            characters, objects, markers
            </summary>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Ground.GroundEntity">
            <summary>
            Parent class meant to be used to access things common to all ground entities.
            </summary>
        </member>
        <member name="T:RogueEssence.Ground.GroundEntity.EEntityTriggerTypes">
             <summary>
             The kind of trigger events available to entity.
            
             </summary>
        </member>
        <member name="T:RogueEssence.Ground.GroundEntity.EEntTypes">
            <summary>
            All sub-classes of the GroundEntity class have an enum entry so that their type can be obtained
            via the GetEntityType() method.
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundEntity.triggerType">
             <summary>
            
             </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundEntity.EntEnabled">
            <summary>
            When this property is false, all processing of this entity is disabled.
            So it essentially becomes invisible and inactive on the map.
            Its mainly meant to be used with the mape editor so entities
            can be placed and activated only when needed by the map scenario.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.GetEntityType">
            <summary>
            Returns an enum value indicating the actual type of this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.#ctor">
            <summary>
            Default base constructor
            </summary>
        </member>
        <member name="P:RogueEssence.Ground.GroundEntity.DevEntColoring">
            <summary>
            The color of the boxes and etc around the entity
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.DevHasGraphics">
            <summary>
            Whether an entity has graphics that can be drawn. Aka, a marker has no graphics, but a character has.
            An object that's just a trigger has no graphics, but an object with a sprite attached has graphics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.DoCleanup">
            <summary>
            Function to be run when an entity is removed. Meant to cleanup events data.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.HasScriptEvent(RogueEssence.Script.LuaEngine.EEntLuaEventTypes)">
            <summary>
            Returns true if there exists and event with the same name as the string eventname.
            The script event doesn't need to be loaded.
            </summary>
            <param name="ev"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.ReloadEvents">
            <summary>
            This reset events  after they are unserialized for example
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.LuaEngineReload">
            <summary>
            This reset events after a script reload. the execution will break, unlike ReloadEvents
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.RunEvent(RogueEssence.Script.LuaEngine.EEntLuaEventTypes,RogueEssence.Script.TriggerResult)">
            <summary>
            Run a lua event by type
            </summary>
            <param name="ev"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.RunEvent(RogueEssence.Script.LuaEngine.EEntLuaEventTypes,RogueEssence.Script.TriggerResult,System.Object[])">
             <summary>
            
             </summary>
             <param name="ev"></param>
             <param name="parameters"></param>
             <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.IsEventSupported(RogueEssence.Script.LuaEngine.EEntLuaEventTypes)">
            <summary>
            Used to check if an entity supports a lua event of the given kind.
            </summary>
            <param name="ev"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.OnDeserializeMap(RogueEssence.Ground.GroundMap)">
            <summary>
            This is called when the map owning the entity is deserialized.
            Its meant to help entities re-subscribe their events to the proper delegates,
            and load their assigned lua function.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.OnMapInit">
            <summary>
            This should be called when the map is initialized, either after loading a save, or when loading a map for the first time.
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.SetTriggerType(RogueEssence.Ground.GroundEntity.EEntityTriggerTypes)">
            <summary>
            Setup the current trigger method for this entity.
            The trigger specifies how to interact with an entity.
            </summary>
            <param name="triggerty"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.GetTriggerType">
            <summary>
            Returns the type of trigger method configured for this entity.
            The trigger specifies how to interact with an entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.ActiveLuaCallbacks">
            <summary>
            Returns a list of all the lua callbacks this entity is subscribed to currently.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundEntity.Interact(RogueEssence.Ground.GroundEntity,RogueEssence.Script.TriggerResult)">
            <summary>
            When something tries to interact with this entity, this method is called.
            </summary>
            <param name="activator"></param>
        </member>
        <member name="P:RogueEssence.Ground.GroundMap.TexSize">
            <summary>
            Size in tex units (8x8 tiles)
            </summary>
        </member>
        <member name="F:RogueEssence.Ground.GroundMap.AssetName">
            <summary>
            the internal name of the map, no spaces or special characters, never localized.
            Used to refer to map data and script data for this map.  This value is always set when loaded,
            But must remain serialized for state saving
            </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.DoCleanup">
             <summary>
             Call this so the map unregisters its events and delegates.
            
             </summary>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.RunScriptEvent(RogueEssence.Script.LuaEngine.EMapCallbacks)">
            <summary>
            Run this map's specified script event
            </summary>
            <param name="ev"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.OnInit">
            <summary>
            Called by GroundScene as the map is being initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.OnEnter">
            <summary>
            Called by the GroundScene when the map is in "Begin" stage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.OnCheck">
            <summary>
            Called by ProcessInput to update the focused character using events stored in the map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.GetChar(System.String)">
            <summary>
            Lookup a character of any type by instance name on the map, and return it if found, or returns null if not found.
            </summary>
            <param name="instancename">The name of the instance of this character</param>
            <returns>Character instance or null if not found</returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.GetMapChar(System.String)">
            <summary>
            Lookup a map character by instance name on the map, and return it if found, or returns null if not found.
            </summary>
            <param name="instancename">The name of the instance of this character</param>
            <returns>Character instance or null if not found</returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.GetTempChar(System.String)">
            <summary>
            Lookup a temp character by instance name on the map, and return it if found, or returns null if not found.
            </summary>
            <param name="instancename">The name of the instance of this character</param>
            <returns>Character instance or null if not found</returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.AddTempChar(RogueEssence.Ground.GroundChar)">
            <summary>
            Add a character entity that shouldn't be serialized!
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.RemoveTempChar(RogueEssence.Ground.GroundChar)">
            <summary>
            Removed a temp character entity from the list of temp characters
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.GetObj(System.String)">
            <summary>
            Lookup an object instance by name on the map.
            Returns the object if found, or null.
            </summary>
            <param name="instancename">Name of the object instance</param>
            <returns>Forund object, or null</returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.GetTempObj(System.String)">
            <summary>
            Lookup a temporary object instance by name on the map.
            Returns the object if found, or null.
            </summary>
            <param name="instancename">Name of the object instance</param>
            <returns>Forund object, or null</returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.AddMarker(System.String,RogueElements.Loc,RogueElements.Dir8)">
            <summary>
            Create a new marker with the specified parameters, and add it to the map.
            </summary>
            <param name="name"></param>
            <param name="pos"></param>
            <param name="dir"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.AddMarker(RogueEssence.Ground.GroundMarker)">
            <summary>
            Add the marker entity specified to the map
            </summary>
            <param name="mark"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.RemoveMarker(System.String)">
            <summary>
            Remove the named marker if present, otherwise does nothing.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.RemoveMarker(RogueEssence.Ground.GroundMarker)">
            <summary>
            Remove the specific marker entity from the map. If not present does nothing.
            </summary>
            <param name="mark"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.GetMarker(System.String)">
            <summary>
            Finds a named marker in the marker table for this map.
            </summary>
            <param name="name">Name of the marker</param>
            <returns>The found marker, or null if not found.</returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.WrapLoc(RogueElements.Loc)">
            <summary>
            Converts out of bounds coords to wrapped-around coords.
            Based on tiles.
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.WrapGroundLoc(RogueElements.Loc)">
            <summary>
            Converts out of bounds coords to wrapped-around coords.
            Based on pixels.
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.FindPossible(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds all objects and walls in the grid cells that the rectangle intersects.  This is not a true collision test!
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.FindPossible(RogueElements.Rect)">
            <summary>
            Finds all objects and walls in the grid cells that the rectangle intersects.  This is not a true collision test!
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.Find(RogueElements.Rect)">
            <summary>
            Finds the objects that intersect the area exactly.
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.GetEntryPoint(System.Int32)">
            <summary>
            Returns the position and location of an entry point for the current map by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.GetEntryPoint(System.String)">
            <summary>
            Returns the position and location of an entry point for the current map by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.SetMarkerPosition(System.String,RogueElements.Loc)">
            <summary>
            Change the position of the specified named marker
            </summary>
            <param name="name"></param>
            <param name="pos"></param>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.FindEntitiesAtPosition(RogueElements.Loc)">
            <summary>
            Convenience method for locating an entity on that map at the
            position specified.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.IterateEntities">
            <summary>
            Allow iterating through all entities on the map,
            characters, objects, markers
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Ground.GroundMap.HasScriptEvent(RogueEssence.Script.LuaEngine.EMapCallbacks)">
            <summary>
            Returns true if there exists and event with the same name as the string eventname.
            The script event doesn't need to be loaded.
            </summary>
            <param name="ev"></param>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Ground.GroundMarker">
            <summary>
            Entity representing a position on the map that can be used by the game logic for
            making entities and etc move to the marker's position.
            </summary>
        </member>
        <member name="T:RogueEssence.Ground.GroundWall">
            <summary>
            Represents a physical body in the world that can collide with others.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.DetourStep`1">
            <summary>
            Deprecated.  DO NOT USE.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.AddLargeRoomStep`1">
            <summary>
            Adds large rooms to the grid plan.
            This is done by choosing an area that contains at least one eligible room, and no ineligible rooms.
            The step then bulldozes the area and places the new room in it.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.AddLargeRoomStep`1.RoomAmount">
            <summary>
            The amount of rooms to place.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.AddLargeRoomStep`1.GiantRooms">
            <summary>
            The types of rooms to place.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.AddLargeRoomStep`1.Filters">
            <summary>
            Determines which rooms are eligible to be replaced with the new room.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.AddLargeRoomStep`1.RoomComponents">
            <summary>
            Components that the newly added room will be labeled with.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.CombineGridRoomBaseStep`1">
            <summary>
            Merges single-cell rooms together into larger rooms, specified in Combos
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.CombineGridRoomBaseStep`1.MergeRate">
            <summary>
            The number of merges to add to the grid plan.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.CombineGridRoomBaseStep`1.Combos">
            <summary>
            List of possible merges that can be done.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.CombineGridRoomBaseStep`1.Filters">
            <summary>
            Determines which rooms are eligible to be merged into a new room.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.CombineGridRoomBaseStep`1.RoomComponents">
            <summary>
            Components that the newly added room will be labeled with.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.GridPathTiered`1">
            <summary>
            Populates the empty floor plan of a map by creating a path consisting of tiers of rooms, with a random value of hallways connecting each tier.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.GridPathTiered`1.TierAxis">
            <summary>
            Choose a horizontal or vertical orientation.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.GridPathTiered`1.TierConnections">
            <summary>
            The number of halls that connects each tier.  Minimum bound at 1.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MarkAsHallStep`1">
            <summary>
            Categorizes the filtered rooms in the grid plan as halls.
            The targeted rooms must be permissive room gens.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.MarkAsHallStep`1.Filters">
            <summary>
            Determines which rooms are eligible to be marked as halls.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.ItemSpawnStep`1">
            <summary>
            Sets the floor's item spawn tables.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.MapEffectStep`1">
            <summary>
            Sets the map's own events.  These events work similarly to the Universal Event, which works game-wide.
            These events work map-wide.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.MapEffectStep`1.Effect">
            <summary>
            The object containing the events.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MapExtraStatusStep`1">
            <summary>
            Adds map statuses to the floor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.MapExtraStatusStep`1.ExtraMapStatus">
            <summary>
            The array of statuses to add to the map.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MapNameIDStep`1">
            <summary>
            Sets the Title of the floor, taking in an offset for ID substitutions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.MapNameIDStep`1.Name">
            <summary>
            The title of the map.
            Can include one string format subtituion for floor number.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MapNameIDStep`1.IDOffset">
            <summary>
            The amount to add to the map ID to get the floor number substituted into the title.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MappedRoomStep`1">
            <summary>
            Loads a file from the Map directory to be used as the dungeon floor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.MappedRoomStep`1.MapID">
            <summary>
            Map file to load
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MapTextureStep`1">
            <summary>
            Decides the tileset for the walls, ground, etc.
            This is done by setting the map's TextureMap to the specified textures.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.MapTextureStep`1.GroundTileset">
            <summary>
            The tileset used for walkable tiles.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MapTextureStep`1.BlockTileset">
            <summary>
            The tileset used for walls, both breakable and unbreakable.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MapTextureStep`1.WaterTileset">
            <summary>
            The tileset used for water, lava, etc.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MapTextureStep`1.LayeredGround">
            <summary>
            Adds an additional ground texture beneath all textures.
            Useful for wall textures that contain transparent pixels.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MapTextureStep`1.IndependentGround">
            <summary>
            Turns off border textures for the ground tileset when near walls.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MapTextureStep`1.GroundElement">
            <summary>
            The map's elemental aligment.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MapDictTextureStep`1">
            <summary>
            Decides the tileset for the walls, ground, etc.
            This is done by setting the map's TextureMap to the specified textures.
            A more fine-tuned version of MapTextureStep that allows mapping of more than just Ground+Wall+Secondary.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.MapDictTextureStep`1.TextureMap">
            <summary>
            Maps the terrain type to the specified autotile.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MapDictTextureStep`1.BlankBG">
            <summary>
            The repeated texture used for the border.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MapDictTextureStep`1.LayeredGround">
            <summary>
            Adds an additional ground texture beneath all textures.
            Useful for wall textures that contain transparent pixels.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MapDictTextureStep`1.IndependentGround">
            <summary>
            Turns off border textures for the ground tileset when near walls.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MapDictTextureStep`1.GroundElement">
            <summary>
            The map's elemental aligment.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MobSpawnStep`1">
            <summary>
            Generates the encounter table of enemies to spawn on a floor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.MoneySpawnStep`1">
            <summary>
            Determines the total amount of money that will be spawned on the whole floor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.ColumnHallBrush">
            <summary>
            A rectangular brush for painting hallways.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.RoomGenCoated`1">
            <summary>
            Generates a room, and then coats it with additional tiles.
            INCOMPLETE
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.RoomGenDiamond`1">
            <summary>
            Generates a rounded room.  Square dimensions result in a circle, while rectangular dimensions result in capsules.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.RoomGenDiamond`1.Width">
            <summary>
            Width of the room.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.RoomGenDiamond`1.Height">
            <summary>
            Height of the room.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.RoomGenLoadMap`1">
            <summary>
            Generates a room by loading a map as the room.
            Includes tiles, items, enemies, and mapstarts.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.RoomGenLoadMap`1.MapID">
            <summary>
            Map file to load.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.RoomGenLoadMap`1.RoomTerrain">
            <summary>
            The terrain that counts as room.  Halls will only attach to room tiles, or tiles specified with Borders.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.RoomGenLoadMap`1.PreventChanges">
            <summary>
            Determines if connecting hallways should continue digging inward after they hit the room bounds, until a walkable tile is found.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.RoomGenPlus`1">
            <summary>
            Generates a rectangular room with the specified width and height, and blocks off the tiles at the edges.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.RoomGenPlus`1.Width">
            <summary>
            Width of the room.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.RoomGenPlus`1.Height">
            <summary>
            Height of the room.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.RoomGenPlus`1.Corner">
            <summary>
            Amount of tiles to remove from corner.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.RoomGenPostProcSpecific`1">
            <summary>
            Generates a room with specific tiles, borders, and post-processing mask.
            EDITOR UNFRIENDLY
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.RoomGenTriangle`1">
            <summary>
            Generates a rounded room.  Square dimensions result in a circle, while rectangular dimensions result in capsules.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.RoomGenTriangle`1.Width">
            <summary>
            Width of the room.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.RoomGenTriangle`1.Height">
            <summary>
            Height of the room.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.ScriptGenStep`1">
            <summary>
            Calls a lua script function that acts as the map gen step.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.ScriptGenStep`1.Script">
            <summary>
            The name of the script.  The resulting function will be FLOOR_GEN_SCRIPT.[Script Name]
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.ScriptGenStep`1.ArgTable">
            <summary>
            Additional arguments that will be passed into the script.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.TileSpawnStep`1">
            <summary>
            Generates the encounter table of trap tiles to spawn on a floor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.LoadBlobStep`1">
            <summary>
            Turns the tiles at the edge of the map into the Unbreakable terrain.
            Thickness can be customized.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.LoadBlobStep`1.Maps">
            <summary>
            Map filea to load.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.LoadBlobStep`1.TerrainStencil">
            <summary>
            Determines which tiles are eligible to be painted on.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.UnbreakableBorderStep`1">
            <summary>
            Turns the tiles at the edge of the map into the Unbreakable terrain.
            Thickness can be customized.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.TileBorderStep`1">
            <summary>
            Turns the tiles at the edge of the map into the specified terrain.
            Thickness and tile type can be customized.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.TileBorderStep`1.Terrain">
            <summary>
            Tile representing the water terrain to paint with.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.GridFloorGen">
            <summary>
            A floor generator that utilizes a grid plan.
            The grid plan is a grid of X by Y cells, which can be filled by a room generator.
            Additionally, horizontal and vertical hallways connect the cells to each other.
            Using this generator allows for gen steps that operate on grid plans.
            It also allows everything RoomFloorGen allows.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.RoomFloorGen">
            <summary>
            A floor generator that utilizes a floor plan.
            The floor plan a list of rooms and hallways, which can be placed in any location.
            The room and hall positions are not confined to a grid.
            Using this generator allows for gen steps that operate on floor plans.
            It also allows everything StairsFloorGen allows.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.StairsFloorGen">
            <summary>
            A floor generator that utilizes stairs.
            Using this generator allows for gen steps that operate on stairs.
            It also allows basic tile and spawning gen steps.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.LoadGen">
            <summary>
            A floor generator that is suited for loading maps created by the editor.
            Using this generator allows for gen steps that load maps.
            It also allows basic tile and spawning gen steps.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.ChanceFloorGen">
            <summary>
            Chooses one floorgen out of several possibilities.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.RandDecay">
            <summary>
            Selects an integer in a predefined range.  Starts with minimum and continually rolls until a failure.  Chance of higher numbers decays exponentially.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.BoxSpawner`1">
            <summary>
            Spawns a box with a random item in it.
            </summary>
            <typeparam name="TGenContext"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.BoxSpawner`1.BoxID">
            <summary>
            The item ID of the box containing the item.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.BoxSpawner`1.BaseSpawner">
            <summary>
            The spawner that decides what item the box holds.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.BulkSpawner`2">
            <summary>
            Generates spawnable objects using a spawnlist and a regular list.
            The normal list is for choosing specific objects that are ALWAYS spawned.
            The spawnlist is for choosing several items randomly.
            </summary>
            <typeparam name="TGenContext"></typeparam>
            <typeparam name="TSpawnable"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.BulkSpawner`2.SpecificSpawns">
            <summary>
            Objects that are always spawned.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.BulkSpawner`2.RandomSpawns">
            <summary>
            An encounter/loot table of random spawnable objects.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.BulkSpawner`2.SpawnAmount">
            <summary>
            The number of objects to roll from Random Spawns.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.DisconnectedSpawnStep`3">
            <summary>
            Spawns objects on tiles that are not connected to the main path.
            Mostly obsolete; use regular spawning and pick rooms marked as disconnected
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.MobSpawn.BaseForm">
            <summary>
            The species, form, etc. of the mob spawned.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MobSpawn.Level">
            <summary>
            The level of the monster spawned.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MobSpawn.SpecifiedSkills">
            <summary>
            The skills for the mob.  Empty spaces will be filled based on its current level.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MobSpawn.Intrinsic">
            <summary>
            The passive skill for the mob.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MobSpawn.Tactic">
            <summary>
            The mob's AI.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MobSpawn.SpawnConditions">
            <summary>
            Conditions that must be met in order for the mob to spawn.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MobSpawn.SpawnFeatures">
            <summary>
            Additional alterations made to the mob after it is created but before it is spawned.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MobSpawnStatus">
            <summary>
            Spawns the mob with a status problem.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MobSpawnStatus.Statuses">
            <summary>
            The possible statuses.  Picks one.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MoneyDivSpawner`1">
            <summary>
            Divides a given amount of money into a specified number of pickups.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.MoneyDivSpawner`1.DivAmount">
            <summary>
            The number of pickups to split the total sum of money into.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MoneySpawnRange">
            <summary>
            Selects a MoneySpawn with an amount in a predefined range.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.LoopedTeamSpawner`1">
            <summary>
            Spawns mob teams from a specified team builder, at a specified amount.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.LoopedTeamSpawner`1.Picker">
            <summary>
            Builds the team to be spawned.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.LoopedTeamSpawner`1.AmountSpawner">
            <summary>
            Decides how many teams to spawn.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.PresetMultiTeamSpawner`1">
            <summary>
            Spawns specific mob teams defined in a list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.PresetMultiTeamSpawner`1.Spawns">
            <summary>
            The list of teams to spawn.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.TeamContextSpawner`1">
            <summary>
            Spawns mob teams to the map based on the map's encounter table.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.TeamContextSpawner`1.Amount">
            <summary>
            This amount is in total team members, not in teams.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.NearSpawnableSpawnStep`3">
            <summary>
            Places objects on the floor in the room of an existing spawnable, or as close to it as possible.
            </summary>
            <typeparam name="TGenContext">Type of the MapGenContext.</typeparam>
            <typeparam name="TSpawnable">Type of the object to spawn.</typeparam>
            <typeparam name="TPriorSpawn">Type of the spawnable to refer to.</typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.NearSpawnableSpawnStep`3.SuccessPercent">
            <summary>
            The percentage chance to multiply a room's spawning chance when it successfully spawns an object.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.PlaceDisconnectedMobsStep`1">
            <summary>
            Picks tiles that cannot be reached by walking from the entrance and spawns the mobs there.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.PlaceDisconnectedMobsStep`1.AcceptedTiles">
            <summary>
            The terrain types to spawn the mobs in.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.PlaceEntranceMobsStep`2">
            <summary>
            Places mobs in the room where the entrance is.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TEntrance"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.PlaceMobsStep`1.Spawn">
            <summary>
            The generator responsible for creating the list of teams to spawn.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.PlaceMobsStep`1.Ally">
            <summary>
            Determines if the mobs should be spawned as allies.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.PlaceNoLocMobsStep`1">
            <summary>
            Places the mobs without altering their location in any way.
            This is useful for mobs that already have their location set on creation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.PlaceRadiusMobsStep`1">
            <summary>
            Picks tiles that can be reached by walking from the entrance and spawns the mobs there, within a radius.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.PlaceRandomMobsStep`1">
            <summary>
            Places mobs in random rooms.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.PlaceRandomMobsStep`1.ClumpFactor">
            <summary>
            A percentage value at or above 0.
            Lower numbers make enemies spread out more evenly.
            Higher numbers cause them to spawn in bigger groups.
            </summary>
        </member>
        <member name="P:RogueEssence.LevelGen.PlaceRandomMobsStep`1.Filters">
            <summary>
            Used to filter out rooms unsuitable for spawning the mobs in.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.PlaceTerrainMobsStep`1">
            <summary>
            Picks tiles of a terrain spawns the mobs there.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.PlaceTerrainMobsStep`1.AcceptedTiles">
            <summary>
            The terrain types to spawn the mobs in.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TeamMemberSpawn.MemberRole.Normal">
            <summary>
            Can be put in teams of any size at any quantity.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TeamMemberSpawn.MemberRole.Support">
            <summary>
            Only one of this variety can spawn in a team.  Requires team size > 1.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TeamMemberSpawn.MemberRole.Leader">
            <summary>
            Only one of this variety can spawn in a team.  Can be any team size.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TeamMemberSpawn.MemberRole.Loner">
            <summary>
            Only one of this variety can spawn in a team.  Requires team size = 1.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TeamMemberSpawn.Spawn">
            <summary>
            The mob to spawn.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TeamMemberSpawn.Role">
            <summary>
            The role of the mob in the team.
            Determines how many can be spawned in a team and when.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.PoolTeamSpawner">
            <summary>
            Spawns a team by randomly rolling a team size and filling it with randomly rolled team members.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.PoolTeamSpawner.Spawns">
            <summary>
            Normal spawns.  Can be put in teams of any size at any quantity.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.PoolTeamSpawner.TeamSizes">
            <summary>
            Possible team sizes.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.SpecificTeamSpawner">
            <summary>
            Spawns a team with specific members.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpecificTeamSpawner.Spawns">
            <summary>
            The members of the team.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.DetectItemStep`1">
            <summary>
            Orients all already-placed compass tiles to point to points of interest.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.DetectItemStep`1.FindItem">
            <summary>
            Tile used as compass.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.DetectTileStep`1">
            <summary>
            Orients all already-placed compass tiles to point to points of interest.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:RogueEssence.LevelGen.DetectTileStep`1.FindTile">
            <summary>
            Tile used as compass.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.StairsStencil`1">
            <summary>
            A filter for determining the eligible tiles for an operation.
            Tiles must or must not have a panel.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.StairsStencil`1.Not">
            <summary>
            If turned on, test will pass for empty tiles.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.TileEffectStencil`1">
            <summary>
            A filter for determining the eligible tiles for an operation.
            Tiles must or must not have a panel.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.LevelGen.TileEffectStencil`1.Not">
            <summary>
            If turned on, test will pass for empty tiles.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MatchTileEffectStencil`1">
            <summary>
            A filter for determining the eligible tiles for an operation.
            Tiles must have a specific panel.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.LevelGen.LayeredSegment">
            <summary>
            A dungeon segment where each floor has its own map generator, with no gaps in between floors.
            Players attempting to enter a floor in this segment will be served by the generator corresponding to the floor number they requested.
            An error will occur if the requested floor is out of range.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.SingularSegment">
            <summary>
            A dungeon segment where each floor has the same map generator.
            Players attempting to enter a floor in this segment will be served by the same generator no matter what.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.RangeDictSegment">
            <summary>
            A dungeon segment where multiple floors can be mapped to the same map generator.
            Players attempting to enter a floor in this segment will be served by the generator corresponding to the floor range that covers the number they requested.
            An error will occur if the requested floor is out of range.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.DictionarySegment">
            <summary>
            A dungeon segment where each floor has its own map generator, with gaps between floors allowed.
            Players attempting to enter a floor in this segment will be served by the generator corresponding to the floor number they requested.
            An error will occur if the requested floor does not have a generator.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.ZoneSegmentBase.ZoneSteps">
            <summary>
            Map Generation steps that apply to multiple floors at a time.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.ZoneSegmentBase.IsRelevant">
            <summary>
            Determines if the segment counts to the dungeon's total floor count.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.FloorNameIDZoneStep">
            <summary>
            Names all floors of the dungeon segment according to a naming convention.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.FloorNameIDZoneStep.Name">
            <summary>
            The name to give the floors.  Can use {0} for floor number.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.FloorNameIDZoneStep.Priority">
            <summary>
            At what point in the map gen process to run the naming step in.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.CategorySpawn`1.Spawns">
            <summary>
            The objects to spawn within this category.
            Assuming that this category was chosen for spawning,
            the chance that an object will spawn on a given floor is its spawn rate for that floor,
            divided by the sum of all objects' spawn rates on that floor.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.CategorySpawn`1.SpawnRates">
            <summary>
            The spawn rate of the entire category across the entire dungeon segment.
            The chance that this category is chosen on a given floor is the spawn rate for that floor,
            divided by the sum of all categories' spawn rates on that floor.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.ItemSpawnZoneStep">
            <summary>
            Generates the table of items to spawn on all floors.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.ItemSpawnZoneStep.Priority">
            <summary>
            At what point in the map gen process to run the item spawning in.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.ItemSpawnZoneStep.Spawns">
            <summary>
            The spawn table, organized by category.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.ItemSectionedZoneStep">
            <summary>
            Generates the table of items to spawn on all floors.  Breaks them into sections such that probability is easier.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.ItemSectionedZoneStep.Priority">
            <summary>
            At what point in the map gen process to run the item spawning in.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.ItemSectionedZoneStep.Spawns">
            <summary>
            The spawn table, organized by category.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.MoneySpawnZoneStep">
            <summary>
            Generates the table of items to spawn on all floors
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MoneySpawnZoneStep.Priority">
            <summary>
            At what point in the map gen process to run the money spawning in.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MoneySpawnZoneStep.StartAmount">
            <summary>
            The amount of money spawned on the first floor.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MoneySpawnZoneStep.AddAmount">
            <summary>
            The amount of money that is added on each increasing floor.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.MoneySpawnZoneStep.ModStates">
            <summary>
            Flags from the player's passives that will affect the money spawned.
            If a player enters a floor and is carrying an item, intrinsic, etc. that has a ModGenState listed here,
            The amount of money spawned will be increased by the ModGenState's value.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.RangeStepZoneStep">
            <summary>
            Places steps on the floor based on a table.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.RangeStepZoneStep.StepPriority">
            <summary>
            The priority to insert the step at.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.RangeStepZoneStep.Spawns">
            <summary>
            The steps to distribute.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.ScriptZoneStep">
            <summary>
            Calls a lua script function that acts as the map gen step.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.ScriptZoneStep.Script">
            <summary>
            The name of the script.  The resulting function will be ZONE_GEN_SCRIPT.[Script Name]
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.ScriptZoneStep.ArgTable">
            <summary>
            Additional arguments that will be passed into the script.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.SpreadCombinedZoneStep">
            <summary>
            Combines zonesteps that spread across floors, ensuring none of them collide by deleting the drop point from the later collision.
            First step takes priority over second step, etc.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadCombinedZoneStep.Steps">
            <summary>
            The steps to distribute.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadPlanBase.FloorRange">
            <summary>
            The range of floors that can be spawned in.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.SpreadPlanChance">
            <summary>
            Spreads the item across floors by rolling a fixed chance on each floor.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadPlanChance.Chance">
            <summary>
            In percent.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.SpreadPlanSpaced">
            <summary>
            Spreads the object across floors with specified spacing between.
            Good for ensuring a steady supply of food, etc.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadPlanSpaced.FloorSpacing">
            <summary>
            The object spawns will never be found LESS than FloorSpacing.Min floors apart,
            and never MORE than FloorSpacing.Max floors apart.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.SpreadPlanQuota">
            <summary>
            Spreads the spawn across floors based on a quota.  Thus, the dungeon segment is guaranteed to have this many spawns.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadPlanQuota.Quota">
            <summary>
            Determines the amount to spawn.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadPlanQuota.Replaceable">
            <summary>
            Can spawn on the same floor multiple times.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.SpreadRoomZoneStep">
            <summary>
            Generates specific rooms randomly across the whole dungeon segment.  This is done by replacing an existing room on the floor.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadRoomZoneStep.Spawns">
            <summary>
            The rooms to distribute.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadRoomZoneStep.PriorityGrid">
            <summary>
            At what point in the map gen process to add the room in, if the floor gen uses a grid plan.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadRoomZoneStep.PriorityList">
            <summary>
            At what point in the map gen process to add the room in, if the floor gen uses a floor plan.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.RoomGenOption.GridOption">
            <summary>
            The room generator used if the floor gen uses a grid plan.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.RoomGenOption.ListOption">
            <summary>
            The room generator used if the floor gen uses a floor plan.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.RoomGenOption.Filters">
            <summary>
            Determines which rooms are eligible to be replaced.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.SpreadStepZoneStep">
            <summary>
            Spreads a map gen step randomly across the dungeon segment.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadStepZoneStep.StepPriority">
            <summary>
            The priority to insert the step at.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadStepZoneStep.Spawns">
            <summary>
            The steps to distribute.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.SpreadStepRangeZoneStep">
            <summary>
            Spreads a map gen step randomly across the dungeon segment, allowing precise control over the spawn rate across different floors.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadStepRangeZoneStep.StepPriority">
            <summary>
            The priority to insert the step at.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadStepRangeZoneStep.Spawns">
            <summary>
            The steps to distribute.  Probabilities can be customized across floors.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.SpreadZoneStep">
            <summary>
            Generates specific occurrences randomly across the whole dungeon segment.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadZoneStep.SpreadPlan">
            <summary>
            Determines how many floors to distribute the step to, and how spread apart they are.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.SpreadZoneStep.ModStates">
            <summary>
            Flags from the player's passives that will affect the appearance rate of the step.
            If a player enters a floor and is carrying an item, intrinsic, etc. that has a ModGenState listed here,
            The chance of the step appearing will be increased by the ModGenState's value.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.TeamSpawnZoneStep">
            <summary>
            Generates the table of mobs to spawn on all floors.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TeamSpawnZoneStep.Priority">
            <summary>
            At what point in the map gen process to run the mob spawning in.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TeamSpawnZoneStep.Spawns">
            <summary>
            The encounter table for mobs across all floors of the dungeon segment.
            When spawning, the chosen mobs will be grouped into teams of a size described in Team Sizes.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TeamSpawnZoneStep.TeamSizes">
            <summary>
            The size of teams across all floors of the dungeon segment.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TeamSpawnZoneStep.SpecificSpawns">
            <summary>
            Pre-made teams and their spawn chances across floors.
            </summary>
        </member>
        <member name="T:RogueEssence.LevelGen.TileSpawnZoneStep">
            <summary>
            Generates the table of trap tiles to spawn on all floors
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TileSpawnZoneStep.Priority">
            <summary>
            At what point in the map gen process to run the trap spawning in.
            </summary>
        </member>
        <member name="F:RogueEssence.LevelGen.TileSpawnZoneStep.Spawns">
            <summary>
            The encounter table for traps across all floors of the dungeon segment.
            </summary>
        </member>
        <member name="M:RogueEssence.LevelGen.ZoneStep.Instantiate(System.UInt64)">
            <summary>
            Shallow copy + Initialize any runtime variables
            </summary>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.TerrainBorderStencil`1">
            <summary>
            A filter for determining the eligible tiles for an operation.
            Tiles at the border of 2 terrain types are eligible
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.TerrainBorderStencil`1.MatchTiles">
            <summary>
            The allowed tile types that the blob can be placed on.
            </summary>
        </member>
        <member name="P:RogueEssence.TerrainBorderStencil`1.BorderTiles">
            <summary>
            The tile types that the blob must be touching to allow placement.
            </summary>
        </member>
        <member name="F:RogueEssence.TerrainBorderStencil`1.Intrude">
            <summary>
            If left off, the blob will only paint over the match tiles.
            If turned on, the blob will be allowed to paint over border tiles.
            </summary>
        </member>
        <member name="F:RogueEssence.TerrainBorderStencil`1.AllowDiagonal">
            <summary>
            Counts diagonal adjacent tiles if they are a border tile.
            </summary>
        </member>
        <member name="F:RogueEssence.TerrainBorderStencil`1.FullSide">
            <summary>
            The adjacent side must fully touch border.
            </summary>
        </member>
        <member name="T:RogueEssence.AddTunnelStep`1">
            <summary>
            Draws a specified number of angular tunnels starting from the edge of any room or hall.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RogueEssence.AddTunnelStep`1.TurnLength">
            <summary>
            The number of tiles to dig the tunnel forward before changing direction.
            </summary>
        </member>
        <member name="P:RogueEssence.AddTunnelStep`1.MaxLength">
            <summary>
            The expected length of the whole tunnel.
            Actual tunnels can be shorter if they dig into a room or hall, but cannot exceed the chosen max.
            </summary>
        </member>
        <member name="P:RogueEssence.AddTunnelStep`1.AllowDeadEnd">
            <summary>
            Allows tunnels to be dead ends.  Forces tunnels to touch another room or hall if turned off.
            </summary>
        </member>
        <member name="P:RogueEssence.AddTunnelStep`1.Halls">
            <summary>
            The number of tunnels to draw.
            </summary>
        </member>
        <member name="P:RogueEssence.AddTunnelStep`1.Brush">
            <summary>
            The brush to draw the halls with.
            </summary>
        </member>
        <member name="T:RogueEssence.FillImpassableStep`1">
            <summary>
            Finds all fully unreachable tiles that aren't impassable and turns them impassable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.MinimizeBarrierStep`1">
            <summary>
            Removes extraneous unbreakable wall tiles by turning them into regular wall tiles.
            THIS DOES NOT WORK YET
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RogueEssence.Script.IEntityWithLuaData">
            <summary>
            Interface for entities having a lua data table.
            Its meant for the lua script to be able to store state information inside entities.
            </summary>
        </member>
        <member name="P:RogueEssence.Script.IEntityWithLuaData.LuaData">
            <summary>
            Lua table containing the data for the object.
            Ideally, implement the interface by using a OptionalAttribute field for this one.
            </summary>
        </member>
        <member name="T:RogueEssence.Script.LuaCoroutineIterator">
            <summary>
            This class is meant to be used to iterate over a lua iterator/coroutine in C# in a conscise way.
            </summary>
        </member>
        <member name="T:RogueEssence.Script.LuaCoroutineWrap">
            <summary>
            Wraps a lua coroutine in a C# class for executing it via the engine's regular coroutine system.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaCoroutineWrap.#ctor(NLua.LuaFunction)">
             <summary>
            
             </summary>
             <param name="fn"></param>
        </member>
        <member name="M:RogueEssence.Script.LuaCoroutineWrap.Resume(System.Object[])">
            <summary>
            Resume the coroutine.
            </summary>
            <param name="arguments">Pass those arguments to resume the coroutine</param>
            <returns>Return value of the coroutine, or null.</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaCoroutineWrap.Status">
            <summary>
            Return the state of the lua coroutine.
            </summary>
            <param name="arguments"></param>
            <returns>Status code for the coroutine.</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaCoroutineWrap.IsDead">
            <summary>
            Whether the coroutine is done or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaCoroutineWrap.Iterate(System.Object[])">
            <summary>
            Allows iterating over the coroutine's yield statements.
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Script.ILuaEngineComponent">
            <summary>
            Class each components of the lua engine should implement
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ILuaEngineComponent.SetupLuaFunctions(RogueEssence.Script.LuaEngine)">
            <summary>
            Setups any extra functionalities for this object written on the lua side.
            </summary>
        </member>
        <member name="T:RogueEssence.Script.LuaEngine">
            <summary>
            Manager for the program-wide lua state. Init and de-init block!
            </summary>
        </member>
        <member name="T:RogueEssence.Script.LuaEngine.EZoneCallbacks">
            <summary>
            The available callbacks a zone's lua script may receive from the engine.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.EnumerateZoneCallbackTypes">
            <summary>
            Enumerate the values in the EDungeonFloorCallbacks enum
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.MakeZoneScriptCallbackName(System.String,RogueEssence.Script.LuaEngine.EZoneCallbacks)">
            <summary>
            Create the name of a map's expected callback function in its script.
            Each specifc callbacks has its own name and format.
            </summary>
            <param name="callbackformat"></param>
            <param name="mapname"></param>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Script.LuaEngine.EMapCallbacks">
            <summary>
            The available callbacks a map's lua script may receive from the engine.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.EnumerateCallbackTypes">
            <summary>
            Utility function for the EMapCallbacks enum. Allows iterating all the enum's values.
            Meant to be used with a foreach loop
            </summary>
            <returns>One of the enum value.</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.MakeMapScriptCallbackName(System.String,RogueEssence.Script.LuaEngine.EMapCallbacks)">
            <summary>
            Create the name of a map's expected callback function in its script.
            Each specifc callbacks has its own name and format.
            </summary>
            <param name="callbackformat"></param>
            <param name="mapname"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Script.LuaEngine.EDungeonMapCallbacks">
            <summary>
            Possible lua callbacks for a given dungeon floor
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.EnumerateDungeonFloorCallbackTypes">
            <summary>
            Enumerate the values in the EDungeonFloorCallbacks enum
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.MakeDungeonMapScriptCallbackName(System.String,System.Int32,RogueEssence.Script.LuaEngine.EDungeonMapCallbacks)">
            <summary>
            Returns the name string for a lua callback function for the given dungeon's floor
            </summary>
            <param name="zonename"></param>
            <param name="floornumber"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.MakeDungeonFloorAssetName(System.String,System.Int32)">
            <summary>
            Generates an asset name for the given floor in the given dungeon. Mainly used for scripts.
            </summary>
            <param name="dungeonname"></param>
            <param name="floornumber"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.MakeDefaultDungeonFloorCallbackName(System.String,RogueEssence.Script.LuaEngine.EDungeonMapCallbacks)">
            <summary>
            Return the name string for a lua callback for all the non-overriden dungeon floor events, for a given dungeon.
            </summary>
            <param name="dungeonname"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Script.LuaEngine.EEntLuaEventTypes">
            <summary>
            Types of events that an entity may have.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.IterateLuaEntityEvents">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.PathToScript(System.String)">
            <summary>
            Assemble the path to the specified script
            </summary>
            <param name="script">Script to make the path for</param>
            <returns>The path to the script file.</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.#ctor">
            <summary>
            Constructor private, since we don't want to instantiate this more than once! Otherwise bad things will happen.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.ImportDotNet">
            <summary>
            Handles importing the various .NET namespaces used in the project to lua.
            It uses reflection to do so.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.Reset">
            <summary>
            Clean the lua state
            Must call init methods manually again!!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.ReInit">
            <summary>
            Calling this sends the OnInit event to the script engine.
            Use this if you just reset the script state, and want to force it to do its initialization.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.SetLuaPaths">
            <summary>
            Set lua package paths to the ones in the game's files.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.FillServiceEventsTable">
            <summary>
            Expose the list of available service callbacks names to Lua. It should make it easier for script devs to get a list of them to fiddle with.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.SetupGlobals">
            <summary>
            Add all the required global variables to the lua environment!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.ExposeInterface">
            <summary>
            Call this on map changes to ensure that the script engine has access to those .NET globals!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.CacheMainScripts">
            <summary>
            Preload the script files we expect to be there!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.LoadSavedData(RogueEssence.Data.GameProgress)">
            <summary>
            Use this to un-serialize the script variables and load them.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.SaveData(RogueEssence.Data.GameProgress)">
            <summary>
            Use this to serialize the script variables and place the serialized data into the current GameProgress.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.SaveLuaTable(NLua.LuaTable)">
            <summary>
            Creates a deep-copy conversion of the input lua table to a dictionary of objects.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.SerializeLuaTable(NLua.LuaTable)">
            <summary>
            Dumps the specified lua table to a string, for serialization!
            </summary>
            <param name="tbl">lua table itself</param>
            <returns>A string representation of the lua table.Returns null if failed!</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.DeserializedLuaTable(System.String)">
            <summary>
            Deserialize a lua table that was dumped to a string using the SerializeLuaTable method.
            </summary>
            <param name="serializedtbl"></param>
            <returns></returns>
        </member>
        <member name="T:RogueEssence.Script.LuaEngine.ImportEntry">
            <summary>
            Struct used for defining an entry to be imported by the script engine.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.InstantiateLuaModule(System.String,System.Object[])">
            <summary>
            Instantiate a lua module's Class table using its metatable's "__call" definition
            </summary>
            <param name="classpath"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.CallLuaMemberFun(System.String,System.String,System.Object[])">
            <summary>
            Allow calling a lua function of a lua table/object with the specified parameters, and returns the result.
            </summary>
            <param name="objname">Path of the lua object instance whose method we'll call.</param>
            <param name="funname">Name of the method of the lua object instance to call.</param>
            <param name="args">Parameters to pass the method (excluding "self")</param>
            <returns>Returns the array of objects that the lua interpreter returns after executing the method.</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.CallLuaFunctions(System.String,System.Object[])">
            <summary>
            Calls a lua function of the given name, with the given arguments, and returns its return value(s).
            </summary>
            <param name="path">Path of the function to call.</param>
            <param name="args">Parameters to pass the function being called.</param>
            <returns>Returns the array of objects that the lua interpreter returns after executing the method.</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.RunString(System.String,System.String)">
            <summary>
            Makes the lua interpreters execute the given string as lua code.
            </summary>
            <param name="luatxt">Lua code  to execute.</param>
            <returns>Object array containing the return value of the string's execution.</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.MakeZoneScriptPath(System.Boolean,System.String,System.String)">
            <summary>
            Makes the full absolute path to the directory a map's script should be in.
            </summary>
            <param name="mapname">AssetName of the map to look for.</param>
            <returns>Absolute path to the map's script directory.</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.RunZoneScript(System.String)">
            <summary>
            Load and execute the script of a zone.
            </summary>
            <param name="zoneassetname">The AssetName of the zone for which we have to load the script of</param>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.CleanZoneScript(System.String)">
            <summary>
            Use this to clean up the traces left behind by a zone package.
            Also collects garbages.
            </summary>
            <param name="zoneassetname"></param>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.MakeDungeonMapScriptPath(System.Boolean,System.String,System.String)">
            <summary>
            Makes the full absolute path to the directory a map's script should be in.
            </summary>
            <param name="mapname">AssetName of the map to look for.</param>
            <returns>Absolute path to the map's script directory.</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.RunDungeonMapScript(System.String)">
            <summary>
            Load and execute the script of a zone.
            </summary>
            <param name="mapassetname">The AssetName of the zone for which we have to load the script of</param>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.CleanDungeonMapScript(System.String)">
            <summary>
            Use this to clean up the traces left behind by a zone package.
            Also collects garbages.
            </summary>
            <param name="zoneassetname"></param>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.MakeGroundMapScriptPath(System.Boolean,System.String,System.String)">
            <summary>
            Makes the full absolute path to the directory a map's script should be in.
            </summary>
            <param name="mapname">AssetName of the map to look for.</param>
            <returns>Absolute path to the map's script directory.</returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.RunGroundMapScript(System.String)">
            <summary>
            Load and execute the script of a map.
            </summary>
            <param name="mapassetname">The AssetName of the map for which we have to load the script of</param>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.CleanMapScript(System.String)">
            <summary>
            Use this to clean up the traces left behind by a map package.
            Also collects garbages.
            </summary>
            <param name="mapassetname"></param>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.CreateGroundMapScriptDir(System.String)">
            <summary>
            Creates the bare minimum script and map folder for a ground map.
            </summary>
            <param name="mapassetname"></param>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.CreateZoneScriptDir(System.String)">
            <summary>
            Creates the bare minimum script and zone folder for a zone.
            </summary>
            <param name="zoneassetname"></param>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.CreateCoroutineIterator(System.String,System.Object[])">
            <summary>
            Creates a wrapped coroutine that works like a lua iterator.
            Each call to the returned function will call resume on the wrapped coroutine, and resume from where it left off.
            </summary>
            <param name="luapath">Path to the lua function. Ex: "Mytable.ObjectInstance.luafunction"</param>
            <param name="arguments">Arguments to pass the function on call. Those will be wrapped into the lua iterator function.</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.CreateCoroutineIterator(NLua.LuaFunction,System.Object[])">
            <summary>
            Creates a wrapped coroutine that works like a lua iterator.
            Each call to the returned function will call resume on the wrapped coroutine, and resume from where it left off.
            </summary>
            <param name="luafun">LuaFunction the iterator should run!</param>
            <param name="arguments">Arguments to pass the function on call. Those will be wrapped into the lua iterator function.</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.DoesFunctionExists(System.String)">
            <summary>
            Checks if a Lua function exists in the current state.
            </summary>
            <param name="luapath"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.MakeLuaAction(NLua.LuaFunction,System.Object[])">
            <summary>
            Makes a .net Action to be used in lua
            </summary>
            <param name="fun"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine._DummyWait">
            <summary>
            Utility function for returning a dummy yield through the lua layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnDataLoad">
            <summary>
            Call this when DataManager is being initialized
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnDataUnload">
            <summary>
            Call this when DataManager is being de-initialized
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnGraphicsLoad">
            <summary>
            Call this when GraphicsManager is being loaded.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnGraphicsUnload">
            <summary>
            Call this when GraphicsManager is being unloaded.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnMusicChange(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Called when the music changes!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnLossPenalty(RogueEssence.Data.GameProgress)">
            <summary>
            Called after failing a dungeon in main progress!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnGroundModeBegin">
            <summary>
            Called when the game mode switches to GroundMode!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnGroundModeEnd">
            <summary>
            Called when the game mode switches to another mode from ground mode!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnGroundMapEnter(System.String,RogueEssence.Ground.GroundMap)">
            <summary>
            #TODO: Call this when a ground map is entered!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnGroundMapExit(System.String,RogueEssence.Ground.GroundMap)">
            <summary>
            #TODO: Call this when a ground map is exited!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnDungeonModeBegin">
            <summary>
            Called when the game switches to DungeonMode
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnDungeonModeEnd">
            <summary>
            Called when the game switches to another mode from DungeonMode
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnDungeonMapInit(System.String,RogueEssence.Dungeon.Map)">
            <summary>
            #TODO: Call this when a dungeon map starts!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnDungeonMapEnter(System.String,RogueEssence.Dungeon.Map)">
            <summary>
            When entering a new dungeon floor this is called
            </summary>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnDungeonMapExit(System.String,RogueEssence.Dungeon.Map)">
            <summary>
            When leaving a dungeon floor this is called.
            </summary>
            <param name="floor">Floor on which was just exited</param>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.OnActivate(RogueEssence.Ground.GroundEntity,RogueEssence.Ground.GroundEntity)">
            <summary>
            Called when an entity activates another.
            </summary>
            <param name="activator">The entity that activates the target</param>
            <param name="target">The entity that is being activated</param>
            <param name="info">The context of the activation</param>
        </member>
        <member name="M:RogueEssence.Script.LuaEngine.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Call this so the LuaEngine calls the main script's update method.
            </summary>
            <param name="gametime">Time elapsed since launch in game time.</param>
            <param name="frametime">Value between 0 and 1 indicating the current time fraction of a frame the call is taking place at.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "F:RogueEssence.Script.LuaTableContainer.Table" -->
        <member name="T:RogueEssence.Script.ScriptAI">
            <summary>
            Handles script interactions with character AI
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptAI.SetCharacterAI(RogueEssence.Ground.GroundChar,System.String,System.Object[])">
            <summary>
            Assign the given scripted AI class to the specified GroundChar.
            </summary>
            <param name="ch"></param>
            <param name="classpath"></param>
        </member>
        <member name="M:RogueEssence.Script.ScriptAI.DisableCharacterAI(RogueEssence.Ground.GroundChar)">
            <summary>
            Disable a given groundchar's AI processing until its enabled again.
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:RogueEssence.Script.ScriptAI.EnableCharacterAI(RogueEssence.Ground.GroundChar)">
            <summary>
            Enable a given groundchar's AI processing if its currently disabled
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:RogueEssence.Script.ScriptAI.SetAIState(RogueEssence.Ground.GroundChar,System.String)">
            <summary>
            Enable a given groundchar's AI processing if its currently disabled
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:RogueEssence.Script.ScriptDungeon.CharTurnToChar(RogueEssence.Dungeon.Character,RogueEssence.Dungeon.Character)">
            <summary>
            Makes a character turn to face another
            </summary>
            <param name="curch"></param>
            <param name="turnto"></param>
        </member>
        <member name="M:RogueEssence.Script.ScriptDungeon.LastDungeonResult">
            <summary>
            Gets the result of the last dungeon adventure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptDungeon.DungeonCurrentFloor">
            <summary>
            Returns the floor number of the current dungeon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptDungeon.DungeonAssetName">
            <summary>
            Returns the internal name for the current dungeon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptDungeon.DungeonDisplayName">
            <summary>
            Returns the localized name of the current dungeon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptDungeon.CharSetEmote(RogueEssence.Dungeon.Character,System.String,System.Int32)">
            <summary>
            Set a character's emote in a dungeon map.
            </summary>
            <param name="chara">Character to emote</param>
            <param name="emoteid">ID of the emote</param>
            <param name="cycles">The number of times to play the emote.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptDungeon.CharStartAnim">
            <summary>
            Set a character's animation.
            </summary>
            <param name="chara">Character to animate</param>
            <param name="anim">Name of the animation</param>
            <param name="loop">Whether to loop the animation</param>
            <example>
            DUNGEON:CharStartAnim(player, anim, false)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptDungeon.CharEndAnim">
            <summary>
            Stops a character's current animation, reverting them to default idle.
            </summary>
            <param name="chara">Character to stop animating</param>
            <example>
            DUNGEON:CharEndAnim(player)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptDungeon.CharWaitAnim">
            <summary>
            Set a character's animation, and waits until it completed before continue.
            </summary>
            <param name="chara">Character to animate</param>
            <param name="anim">Name of the animation</param>
            <example>
            DUNGEON:CharStartAnim(player, anim)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptDungeon.PlayVFX(RogueEssence.Content.FiniteEmitter,System.Int32,System.Int32,RogueElements.Dir8)">
            <summary>
            Plays a VFX in the dungeon map
            </summary>
            <param name="emitter">The VFX emitter</param>
            <param name="x">X position in pixels</param>
            <param name="y">Y Position in pixels</param>
            <param name="dir">Direction to orient the VFX, defaults to Down</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptDungeon.PlayVFX(RogueEssence.Content.FiniteEmitter,System.Int32,System.Int32,RogueElements.Dir8,System.Int32,System.Int32)">
            <summary>
            Plays a VFX that has a start position and an end position.  It uses a finite emitter that generates BaseAnims.
            </summary>
            <param name="emitter">The VFX emitter</param>
            <param name="x">Start X position in pixels</param>
            <param name="y">Start Y Position in pixels</param>
            <param name="dir">Direction to orient the VFX, defaults to Down.</param>
            <param name="xTo">End X position in pixels</param>
            <param name="yTo">End Y position in pixels</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptDungeon.PlayVFXAnim(RogueEssence.Content.BaseAnim,RogueEssence.Content.DrawLayer)">
            <summary>
            Plays a VFX using just a BaseAnim
            </summary>
            <param name="anim">The animation to play</param>
            <param name="layer">The layer to put it on</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptDungeon.MoveScreen(RogueEssence.Content.ScreenMover)">
            <summary>
            Plays a screen-moving effect.
            </summary>
            <param name="mover">The screen mover.</param>
        </member>
        <member name="T:RogueEssence.Script.ScriptEvent">
            <summary>
            An event which calls a script function when triggered!
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptEvent.#ctor">
            <summary>
            Protected blank constructor, for child classes
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptEvent.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="luafunpath"></param>
        </member>
        <member name="M:RogueEssence.Script.ScriptEvent.DoCleanup">
            <summary>
            Called when the event is about to be removed from the context. Add everything that needs to be done before the event is removed in here.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptEvent.callInternal(System.String,NLua.LuaFunction)">
            <summary>
            Wrapper around the lua iterator to catch and print any possible script errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptEvent.ReloadEvent">
            <summary>
            Looks into the current lua state for the function corresponding to this event's stored luapath, and determines if it can
            be run or not.
            This should be called only after the corresponding map script has been loaded, otherwise it won't find its matching function.
            </summary>
        </member>
        <member name="T:RogueEssence.Script.TransientScriptEvent">
            <summary>
            TransientScriptEvent is a script event that's not meant to be serialized,
            and runs for a short period of time.
            As a result, it can take directly a lua function as construction parameter!
            </summary>
        </member>
        <member name="P:RogueEssence.Script.ScriptGame.Rand">
            <summary>
            The game's random object.  Is not recorded in replays.
            </summary>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.GroundSave">
            <summary>
            Saves the game while in ground mode.
            </summary>
            <example>
            GAME:GroundSave()
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetModDiff(System.String)">
            <summary>
            TODO
            </summary>
            <param name="uuidStr"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetCurrentGround">
            <summary>
            Gets the current ground map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetCurrentFloor">
            <summary>
            Gets the current dungeon map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetCurrentDungeon">
            <summary>
            Gets the current zone, also known as dungeon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.EnterGroundMap(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Leave current map, and enter specified ground map within the current zone
            </summary>
            <param name="id">The index of the ground map in the zone</param>
            <param name="idxentrypoint">The index of the entry point in the ground map</param>
            <param name="preserveMusic">If set to true, does not change the music when moving to the new ground map.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.EnterGroundMap(System.String,System.String,System.Boolean)">
            <summary>
            Leave current map, and enter specified ground map within the current zone
            </summary>
            <param name="name">The name of the ground map.  It must exist within in the zone.</param>
            <param name="entrypoint">The name of the entry point in the ground map</param>
            <param name="preserveMusic">If set to true, does not change the music when moving to the new ground map.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.EnterGroundMap(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Leave current map, and enter specified ground map within a new zone.
            </summary>
            <param name="zone">The name of the destination zone.</param>
            <param name="name">The name of the ground map.  It must exist within in the zone.</param>
            <param name="entrypoint">The name of the entry point in the ground map</param>
            <param name="preserveMusic">If set to true, does not change the music when moving to the new ground map.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.EnterDungeon">
            <summary>
            Enters a zone and begins a new adventure.
            </summary>
            <param name="dungeonid">The id of the dungeon to travel to.</param>
            <param name="structureid">The segment within the dungeon to start in.  -1 represents ground maps.</param>
            <param name="mapid">The id of the ground map or dungeon map within the dungeon segment.</param>
            <param name="entry">The entry point on the resulting map</param>
            <param name="stakes">Decides what happens when the adventure fails/succeeds.</param>
            <param name="recorded">Record the adventure in a replay</param>
            <param name="silentRestrict">Make the dungeon restrictions silently</param>
            <example>
            GAME:EnterDungeon(1, 0, 0, 0, RogueEssence.Data.GameProgress.DungeonStakes.Risk, true, false)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.ContinueDungeon">
            <summary>
            Enters a zone and continues the current adventure.
            </summary>
            <param name="dungeonid">The id of the dungeon to travel to.</param>
            <param name="structureid">The segment within the dungeon to start in.  -1 represents ground maps.</param>
            <param name="mapid">The id of the ground map or dungeon map within the dungeon segment.</param>
            <param name="entry">The entry point on the resulting map</param>
            <example>
            GAME:ContinueDungeon(1, 1, 0, 0)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.EndDungeonRun">
            <summary>
            Ends the current adventure, sending the player to a specified destination.
            </summary>
            <param name="result">The result of the adventure.</param>
            <param name="destzoneid">The id of the dungeon to travel to.</param>
            <param name="structureid">The segment within the dungeon to start in.  -1 represents ground maps.</param>
            <param name="mapid">The id of the ground map or dungeon map within the dungeon segment.</param>
            <param name="entryid">The entry point on the resulting map</param>
            <param name="display">Display an epitaph marking the end of the adventure.</param>
            <param name="fanfare">Play a fanfare.</param>
            <example>
            GAME:EndDungeonRun(GameProgress.ResultType.Cleared, 0, -1, 1, 0, true, true)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.EnterRescue">
            <summary>
            Enters a zone and begins a rescue adventure.
            </summary>
            <param name="sosPath">The path of the sos mail.</param>
            <example>
            GAME:EnterRescue("RESCUE/INBOX/SOS/example.sosmail")
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.AddAOKRemark(System.Int32)">
            <summary>
            TODO: WIP
            </summary>
            <param name="remarkIndex"></param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.RestartToTitle">
            <summary>
            Leave current map and load up the title screen.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.RestartRogue(RogueEssence.Data.RogueConfig)">
            <summary>
            Restarts a Roguelocke run based on the configuration
            </summary>
             <param name="config">The configuration of the roguelocke run</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.EnterZone(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Enters a zone and begins a new adventure.
            </summary>
            <param name="dungeonid">The id of the dungeon to travel to.</param>
            <param name="structureid">The segment within the dungeon to start in.  -1 represents ground maps.</param>
            <param name="mapid">The id of the ground map or dungeon map within the dungeon segment.</param>
            <param name="entry">The entry point on the resulting map</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.FadeOut">
            <summary>
            Fade out the screen. Waits to complete before continuing.
            </summary>
            <param name="white">Fade to white if set to true.  Fades to black otherwise.</param>
            <param name="duration">The amount of time to fade in frames.</param>
            <example>
            GAME:FadeOut(false, 60)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.FadeIn">
            <summary>
            Fade into the screen. Waits to complete before continuing.
            </summary>
            <param name="duration">The amount of time to fade in frames.</param>
            <example>
            GAME:FadeIn(false, 60)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.MoveCamera">
            <summary>
            Centers the camera on a position.
            </summary>
            <param name="x">X coordinate of the camera center</param>
            <param name="y">Y coordinate of the camera center</param>
            <param name="duration">The amount of time it takes ot move to the destination</param>
            <param name="toPlayer">Destination is in absolute coordinates if false, and relative to the player character if set to true.</param>
            <example>
            GAME:MoveCamera(200, 240, 60, false)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetCameraCenter">
            <summary>
            Gets the current center of the camera.
            </summary>
            <returns>A Loc object representing the center of the camera.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.IsCameraOnChar">
            <summary>
            Determines whether the camera is centered relative to the player.
            </summary>
            <returns>Returns true if the camera is relative to the player, false otherwise.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.HasSOSMail">
            <summary>
            TODO
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.HasAOKMail">
            <summary>
            TODO
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetTeamLeaderIndex">
            <summary>
            Returns the index of the currently player controlled entity in the party.
            </summary>
            <returns>Index of the currently player controlled entity in the party.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.SetTeamLeaderIndex(System.Int32)">
            <summary>
            Sets the leader to the chosen index within the party.
            </summary>
            <param name="idx">The index of the team member within the team.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.SetCanSwitch(System.Boolean)">
            <summary>
            Prevents or allows the switching of leaders for the save file.
            </summary>
            <param name="canSwitch">Set to true to allow switching, set to false to prevent it.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerPartyCount">
            <summary>
            Returns the player party count.  Does not include guests.
            </summary>
            <returns>The count of players</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerPartyTable">
            <summary>
            Return the party as a LuaTable.  Does not include guests.
            </summary>
            <returns>A Lua Table of Characters</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerPartyMember(System.Int32)">
            <summary>
            Gets the character at the specified index within the player's team.
            </summary>
            <param name="index">The specified index</param>
            <returns>The team member retrieved.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerGuestCount">
            <summary>
            Gets the number of guests currently in the player's party.
            </summary>
            <returns>The number of guests</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerGuestTable">
            <summary>
            Return the guests as a LuaTable
            </summary>
            <returns>A Lua Table of Characters</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerGuestMember(System.Int32)">
            <summary>
            Gets the character at the specified index within the player's guests.
            </summary>
            <param name="index">The specified index</param>
            <returns>The team member retrieved.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerAssemblyCount">
            <summary>
            Gets the number of characters currently in the player's assembly.
            </summary>
            <returns>The number of characters</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerAssemblyTable">
            <summary>
            Return the assembly as a LuaTable
            </summary>
            <returns>A Lua Table of Characters</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerAssemblyMember(System.Int32)">
            <summary>
            Gets the character at the specified index within the player's assembly.
            </summary>
            <param name="index">The specified index</param>
            <returns>The assembly member retrieved.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.AddPlayerTeam(RogueEssence.Dungeon.Character)">
            <summary>
            Adds a character to the player's team.
            </summary>
            <param name="character">The character to add.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.RemovePlayerTeam(System.Int32)">
            <summary>
            Removes the character from the team, placing its item back in the inventory.
            </summary>
            <param name="slot">The slot of the player to remove.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.AddPlayerGuest(RogueEssence.Dungeon.Character)">
            <summary>
            Adds a character to the player's guests.
            </summary>
            <param name="character">The character to add.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.RemovePlayerGuest(System.Int32)">
            <summary>
            Removes the character from the team's guests, placing its item back in the inventory.
            </summary>
            <param name="slot">The slot of the player to remove.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.AddPlayerAssembly(RogueEssence.Dungeon.Character)">
            <summary>
            Adds a character to the player's assembly.
            </summary>
            <param name="character">The character to add.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.RemovePlayerAssembly(System.Int32)">
            <summary>
            Removes the character from the assembly, placing its item back in the inventory.
            </summary>
            <param name="slot">The slot of the player to remove.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.SetCharacterNickname(RogueEssence.Dungeon.Character,System.String)">
            <summary>
            Sets a character's nickname
            </summary>
            <param name="character">The character to rename</param>
            <param name="nickname">The new name</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetCharacterNickname(RogueEssence.Dungeon.Character)">
            <summary>
            Gets the character nickname
            </summary>
            <param name="character">The character to get the nickname from</param>
            <returns>The character's nickname</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.SetTeamName(System.String)">
            <summary>
            Sets the name of the player's team
            </summary>
            <param name="teamname">The new team name</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetTeamName">
            <summary>
            Gets the name of the player's team
            </summary>
            <returns>The team's name</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.CanRelearn(RogueEssence.Dungeon.Character)">
            <summary>
            Checks if the character can relearn any skills.
            </summary>
            <param name="character">The character to check</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.CanForget(RogueEssence.Dungeon.Character)">
            <summary>
            Checks if the character can forget any skills.
            </summary>
            <param name="character">The character to check</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.CanLearn(RogueEssence.Dungeon.Character)">
            <summary>
            Checks if the character can learn any skills.
            </summary>
            <param name="character">The character to check</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.CheckLevelSkills">
            <summary>
            Checks the levels gained by a character and prompts to learn all skills along the levels.
            Waits until all skills have been accepted or declined before continuing.
            </summary>
            <param name="chara">The character to prompt for learning.</param>
            <param name="oldLevel">The level that the character leveled up from.</param>
            <example>
            GAME:CheckLevelSkills(player, 5)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.TryLearnSkill">
            <summary>
            Attempts to give a new skill to the specified character, prompting to replace an old one if they are full.
            Waits until all the skill has been accepted or declined before continuing.
            </summary>
            <param name="chara">The character to learn the skill</param>
            <param name="skill">The skill to learn</param>
            <example>
            GAME:TryLearnSkill(player, "thunder")
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.LearnSkill(RogueEssence.Dungeon.Character,System.String)">
            <summary>
            Gives a new skill to a specified character.
            Fails if the character's skills are full.
            </summary>
            <param name="chara">The character to learn the skill</param>
            <param name="skill">The skill to learn</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.ForgetSkill(RogueEssence.Dungeon.Character,System.Int32)">
            <summary>
            Removed a skill from the specified character.
            </summary>
            <param name="chara">The character to forget the skill</param>
            <param name="slot">The slot of the skill to forget</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.SetCharacterSkill(RogueEssence.Dungeon.Character,System.String,System.Int32)">
            <summary>
            Gives a new skill to a specified character, replacing a specifically chosen slot.
            </summary>
            <param name="character">The character to learn the skill</param>
            <param name="skillId">The skill to learn</param>
            <param name="slot">The slot to replace</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetCharacterSkill(RogueEssence.Dungeon.Character,System.Int32)">
            <summary>
            Gets the skill from a specified character and specified slot.
            </summary>
            <param name="chara">The character to get the skill from.</param>
            <param name="slot">The slot to get the skill from.</param>
            <returns>The ID of the skill in the slot</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.CanPromote(RogueEssence.Dungeon.Character)">
            <summary>
            Checks if the character can be promoted to a new class.
            </summary>
            <param name="character">The character to check</param>
            <returns>True if the character can be promoted, false otherwise.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetAvailablePromotions(RogueEssence.Dungeon.Character,System.String)">
            <summary>
            Gets a list of possible classes that the character can prmote to.
            </summary>
            <param name="character">The character to check</param>
            <param name="bypassItem">An exception item that can bypass checks for promotion</param>
            <returns>A lua table of PromoteBranch objects</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.PromoteCharacter(RogueEssence.Dungeon.Character,RogueEssence.Data.PromoteBranch,System.String)">
            <summary>
            Promotes a character ot a new class.
            </summary>
            <param name="character">The character to promote</param>
            <param name="branch">The PromoteBranch to promote with</param>
            <param name="bypassItem">An exception item that can bypass checks for promotion</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.FindPlayerItem(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds an item in the player's team and returns its slot within the inventory or among its team's equips.
            </summary>
            <param name="id">The item ID to search for.</param>
            <param name="held">Check equipped items.</param>
            <param name="inv">Check inventory items.</param>
            <returns>The InvSlot of the item. Invalid if the item could not be found.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerEquippedCount">
            <summary>
            Get the number of items equipped by players.  Does not include guests.
            </summary>
            <returns>The number of items.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerBagCount">
            <summary>
            Get the number of items in the bag.
            </summary>
            <returns>The number of items.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerBagLimit">
            <summary>
            Gets the maximum amount of item the player's team can carry.
            </summary>
            <returns>The number of items.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerEquippedItem(System.Int32)">
            <summary>
            Gets the equipped item for the character in the specified slot.
            </summary>
            <param name="slot">The team slot of the character to check</param>
            <returns>The character's equipped item</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetGuestEquippedItem(System.Int32)">
            <summary>
            Gets the equipped item for the character in the specified guest slot.
            </summary>
            <param name="slot">The guest slot of the character to check</param>
            <returns>The character's equipped item</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GivePlayerItem(RogueEssence.Dungeon.InvItem)">
            <summary>
            Gives an item and adds it to the player team's bag.
            </summary>
            <param name="item">The item to give</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GivePlayerItem(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Gives an item and adds it to the player team's bag.
            </summary>
            <param name="id">The ID of the item</param>
            <param name="count">The amount to give. Default 1</param>
            <param name="cursed">Whether the item is cursed. Default false.</param>
            <param name="hiddenval">The hidden value of the item. Default empty string.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerBagItem(System.Int32)">
            <summary>
            Gets the item found at the specified slot of the player's bag.
            </summary>
            <param name="slot">The slot to check</param>
            <returns>The item found in the slot</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.TakePlayerBagItem(System.Int32)">
            <summary>
            Remove an item from player inventory
            </summary>
            <param name="slot">The slot from which to remove the item</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.TakePlayerEquippedItem(System.Int32)">
            <summary>
            Remove the equipped item from a chosen member of the team
            </summary>
            <param name="slot">The slot of the character on the team from which to remove the item</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.TakeGuestEquippedItem(System.Int32)">
            <summary>
            Remove the equipped item from a chosen guest of the team
            </summary>
            <param name="slot">The slot of the character on the team's guest list from which to remove the item</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerStorageCount">
            <summary>
            Get the amount of items in the player's storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerStorageItemCount(System.String)">
            <summary>
            Get the amount of a specific item in the player's storage
            </summary>
            <param name="id">ID of the item ot check</param>
            <returns>The amount of copies currently in storage</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GivePlayerStorageItem(RogueEssence.Dungeon.InvItem)">
            <summary>
            Gives an item and adds it to the player team's storage.
            </summary>
            <param name="item">The item to give</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GivePlayerStorageItem(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Gives an item and adds it to the player team's storage.
            </summary>
            <param name="id">The ID of the item</param>
            <param name="count">The amount to give. Default 1</param>
            <param name="cursed">Whether the item is cursed. Default false.</param>
            <param name="hiddenval">The hidden value of the item. Default empty string.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.TakePlayerStorageItem(System.String)">
            <summary>
            Takes an item from the storage
            </summary>
            <param name="id">The ID of the item to take</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.DepositAll">
            <summary>
            Takes all items in the player team's bag and equipped items, and deposits them in storage.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerMoney">
            <summary>
            Gets the amount of money the player currently has on hand.
            </summary>
            <returns>The amount of money.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.AddToPlayerMoney(System.Int32)">
            <summary>
            Adds money to the player's wallet.
            </summary>
            <param name="toadd">The amount of money to add.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.RemoveFromPlayerMoney(System.Int32)">
            <summary>
            Removes money from the player's wallet.
            </summary>
            <param name="toremove">The amount of money to remove.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetPlayerMoneyBank">
            <summary>
            Gets the amount of money in the player's bank
            </summary>
            <returns>The amount of money.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.AddToPlayerMoneyBank(System.Int32)">
            <summary>
            Adds money to the player's bank.
            </summary>
            <param name="toadd">The amount of money to add.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.RemoveFromPlayerMoneyBank(System.Int32)">
            <summary>
            Removes money from the player's bank.
            </summary>
            <param name="toremove">The amount of money to remove.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.IsKeyDown(System.Int32)">
            <summary>
            Checks if a player is making a certain input.
            </summary>
            <param name="keyid">The ID of the input</param>
            <returns>True if the button is currently pressed.  False otherwise.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.CutsceneMode(System.Boolean)">
            <summary>
            Sets the game in cutscene mode. This prevents characters from taking idle action and hides certain UI.
            </summary>
            <param name="bon">If set to true, turns cutscene mode on. If set to false, turns it off.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetDailySeed">
            <summary>
            Gets the random seed for the current adventure.
            </summary>
            <returns>The current adventure's seed.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.UnlockDungeon(System.String)">
            <summary>
            Unlocks a specified dungeon.
            </summary>
            <param name="dungeonid">ID of the dungeon to unlock.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.DungeonUnlocked(System.String)">
            <summary>
            Checks if a dungeon is unlocked.
            </summary>
            <param name="dungeonid">ID of the dungeon to check</param>
            <returns>True if unlocked, false otherwise.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.InRogueMode">
            <summary>
            Checks if the current game is in rogue mode.
            </summary>
            <returns>True if in rogue mode, false otherwise.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.HasServerSet">
            <summary>
            TODO: WIP
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.GetRescueAllowed">
            <summary>
            Checks to see if rescue is allowed.
            </summary>
            <returns>True if rescues are allowed, false otherwise.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.SetRescueAllowed(System.Boolean)">
            <summary>
            Sets the value in the player's save file to determine if they can be rescued or not.
            If rescue is possible on the Save File level, it can still be prevented by the map.
            </summary>
            <param name="allowed">Set to true to allow the player to be rescued.  False otherwise.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.QueueLeaderEvent(System.Object)">
            <summary>
            Prepares an event to execute on the next frame.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:RogueEssence.Script.ScriptGame.WaitFrames">
            <summary>
            Waits for a specified number of frames before continuing.
            </summary>
            <param name="frames">The number of frames ot wait.  Each frame is 1/60th of a second.</param>
            <example>
            GAME:WaitFrames(60)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.VectorToDirection(RogueElements.Loc)">
            <summary>
            Turns a vector (preferably a unit vector) into a cardinal or diagonal direction.
            </summary>
            <param name="v">The vector.</param>
            <returns>The direction as one of 8 values.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.VectorToDirection(System.Double,System.Double)">
            <summary>
            Convenience function to get a vector's components from lua numbers(doubles)
            </summary>
            <param name="X">The X value of the vector</param>
            <param name="Y">The Y value of the vector</param>
            <returns>The direction the vector points to as one of 8 values.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.RandomDirection">
            <summary>
            Generates a random direction.
            </summary>
            <returns>An 8-directional direction.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGame.SetupLuaFunctions(RogueEssence.Script.LuaEngine)">
            <summary>
            Setups any extra functionalities for this object written on the lua side.
            </summary>
        </member>
        <member name="T:RogueEssence.Script.ScriptGround">
            <summary>
            Helper interface to regroup everything tied to ground mode under a single object
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.Hide(System.String)">
            <summary>
            Hides an entity.
            </summary>
            <param name="entityname">The name of the entity to hide.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.Unhide(System.String)">
            <summary>
            Unhides an entity.
            </summary>
            <param name="entityname">The name of the entity to unhide.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.CreateObject(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            TODO: WIP
            </summary>
            <param name="objtype"></param>
            <param name="instancename"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.CreateCharacter(System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            TODO: WIP
            </summary>
            <param name="chartype"></param>
            <param name="instancename"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="actionfun"></param>
            <param name="thinkfun"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.RemoveObject(System.String)">
            <summary>
            Deletes an object from the ground map, identified by its instance name.
            </summary>
            <param name="instancename">The instance name of the object.</param>
            <returns>Returns true if succeeded, false otherwise.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.RemoveCharacter(System.String)">
            <summary>
            Deletes a character from the ground map, identified by its instance name.
            </summary>
            <param name="instancename">The instance name of the object.</param>
            <returns>Returns true if succeeded, false otherwise.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.CreateCharacterFromCharData(System.String,RogueEssence.Dungeon.Character,System.Int32,System.Int32,RogueElements.Dir8)">
            <summary>
            Creates a ground character, given a dungeon character.
            </summary>
            <param name="instancename">The instance name to give the character</param>
            <param name="data">Character data to create from</param>
            <param name="x">X coordinate of the character</param>
            <param name="y">Y coordinate of the character</param>
            <param name="direction">Direction the character will face, defaults to Dir8.Down</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.RefreshPlayer">
            <summary>
            Reloads the controllable player's character data to be the current team's leader.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.SetPlayer(RogueEssence.Dungeon.CharData)">
            <summary>
            Sets the controllable player to use new character data
            </summary>
            <param name="charData">The new character data</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.SpawnerDoSpawn(System.String)">
            <summary>
            Make the specified spawner run its spawn method.
            </summary>
            <param name="spawnername"></param>
            <returns>The ground character spawned.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.SpawnerSetSpawn(System.String,RogueEssence.Dungeon.CharData)">
            <summary>
            Sets the character to the specified spawner
            </summary>
            <param name="spawnername">The spawner to set the character to, by name</param>
            <param name="spawnChar">The character to spawn.</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.CharTurnToChar(RogueEssence.Ground.GroundChar,RogueEssence.Ground.GroundChar)">
            <summary>
            Makes a character turn to face another character instantly.
            </summary>
            <param name="turnchar">The character that is turning.</param>
            <param name="turnto">The character to turn to.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.CharTurnToCharAnimated">
            <summary>
            Makes a character do an animated turn to face another character over the specified time.
            Clockwise or counter-clockwise are chosen based on the closest direction.
            Waits until the operation is completed.
            </summary>
            <param name="curch">Character that is turning</param>
            <param name="turnto">Character to turn to</param>
            <param name="framedur">Time spent on each direction, in frames</param>
            <example>
            CharTurnToCharAnimated(charFrom, charTo, 3)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.EntTurn(RogueEssence.Ground.GroundEntity,RogueElements.Dir8)">
            <summary>
            Makes a ground entity turn to face a direction.
            </summary>
            <param name="ent">The ground entity.  Can be a character or object.</param>
            <param name="direction">The direction to face.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.CharAnimateTurn">
            <summary>
            Makes a character do an animated turn to face a chosen direction over the specified time.
            Must specify clockwise or counter-clockwise.
            Waits until the operation is completed.
            </summary>
            <param name="ch">The character to turn</param>
            <param name="direction">The direction to turn to</param>
            <param name="framedur">The time spent in each intermediate direction, in frames</param>
            <param name="ccw">false if clockwise, true if counter-clockwise</param>
            <example>
            CharTurnToCharAnimated(charFrom, Dir8.Left, 3, true)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.CharAnimateTurnTo">
            <summary>
            Makes a character do an animated turn to face a chosen direction over the specified time.
            Waits until the operation is completed.
            </summary>
            <param name="ch">The character to turn</param>
            <param name="direction">The direction to turn to</param>
            <param name="framedur">The time spent in each intermediate direction, in frames</param>
            <example>
            CharTurnToCharAnimated(charFrom, Dir8.Left, 3)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.TeleportTo(RogueEssence.Ground.GroundEntity,System.Int32,System.Int32,RogueElements.Dir8)">
            <summary>
            Repositions the ground entity in a specified location.
            </summary>
            <param name="ent">The ground entity to reposition</param>
            <param name="x">The X coordinate of the destination</param>
            <param name="y">The Y coordinate of the destination</param>
            <param name="direction">The direction to point the entity.  Defaults to Dir8.None, which leaves it untouched.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.MoveInDirection">
            <summary>
            Make ground character move in a direction.
            </summary>
            <param name="chara">Character to move</param>
            <param name="direction">Direction to move in</param>
            <param name="duration">Duration of movement, in frames</param>
            <param name="run">True if using a running animation, false otherwise</param>
            <param name="speed">Speed in pixels per frame</param>
            <example>
            GROUND:MoveInDirection(player, Dir8.Down, 24, false, 2)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.MoveToPosition">
            <summary>
            Make ground character move to a position.
            </summary>
            <param name="chara">Character to move</param>
            <param name="x">X coordinate of destination</param>
            <param name="y">Y  coordinate of destination</param>
            <param name="run">True if using a running animation, false otherwise</param>
            <param name="speed">Speed in pixels per frame</param>
            <example>
            GROUND:MoveInDirection(player, 200, 240, false, 2)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.MoveToMarker">
            <summary>
            Make ground character move to a ground marker.
            </summary>
            <param name="chara">Character to move</param>
            <param name="mark">GroundMarker object ot move to</param>
            <param name="run">True if using a running animation, false otherwise</param>
            <param name="speed">Speed in pixels per frame</param>
            <example>
            GROUND:MoveInDirection(player, marker, false, 2)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.MoveObjectToPosition">
            <summary>
            Make ground object move to a position.
            </summary>
            <param name="ent">Ground Entity to move</param>
            <param name="x">X coordinate of destination</param>
            <param name="y">Y  coordinate of destination</param>
            <param name="speed">Speed in pixels per frame</param>
            <example>
            GROUND:MoveInDirection(player, 200, 240, 2)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.AnimateInDirection">
            <summary>
            Make a ground character move in a direction with custom animation
            </summary>
            <param name="chara">Character to move</param>
            <param name="anim">Name of the animation</param>
            <param name="animDir">Direction of animation</param>
            <param name="direction">Direction to move in</param>
            <param name="duration">Duration of movement, in frames</param>
            <param name="animSpeed">Speed of animation, where 1.0 represents normal speed</param>
            <param name="speed">Speed movement, in pixels per frame</param>
            <example>
            GROUND:AnimateInDirection(player, "Hurt", Dir8.Down, 24, 0.5, 2)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.AnimateToPosition">
            <summary>
            Make a ground entity move to a position with custom animation
            </summary>
            <param name="ent">Entity to move</param>
            <param name="anim">Name of the animation</param>
            <param name="animDir">Direction of animation</param>
            <param name="x">X coordinate of the destination</param>
            <param name="y">Y coordinate of the destination</param>
            <param name="animSpeed">Speed of animation, where 1.0 represents normal speed</param>
            <param name="speed">Speed movement, in pixels per frame</param>
            <example>
            GROUND:AnimateToPosition(player, "Hurt", Dir8.Down, 200, 240, 0.5, 2)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.CharSetEmote(RogueEssence.Ground.GroundChar,System.String,System.Int32)">
            <summary>
            Make a character emote on the ground map.
            </summary>
            <param name="chara">Character to emote</param>
            <param name="emoteid">ID of the emote</param>
            <param name="cycles">The number of times to play the emote.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.CharSetDrawEffect(RogueEssence.Ground.GroundChar,RogueEssence.Dungeon.DrawEffect)">
            <summary>
            Sets the ground character's draw effect to become invisible, shaking, still, etc.
            </summary>
            <param name="chara">Target ground character.</param>
            <param name="effect">The draw effect.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.CharEndDrawEffect(RogueEssence.Ground.GroundChar,RogueEssence.Dungeon.DrawEffect)">
            <summary>
            Sets the ground character's draw effect to become invisible, shaking, still, etc.
            </summary>
            <param name="chara">Target ground character.</param>
            <param name="effect">The draw effect.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.CharSetAnim(RogueEssence.Ground.GroundChar,System.String,System.Boolean)">
            <summary>
            Set a character's animation.
            </summary>
            <param name="chara">Character to animate</param>
            <param name="anim">Name of the animation</param>
            <param name="loop">Whether to loop the animation</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.CharEndAnim(RogueEssence.Ground.GroundChar)">
            <summary>
            Stops a character's current animation, reverting them to default idle.
            </summary>
            <param name="chara">Character to stop animating</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.CharWaitAnim">
            <summary>
            Makes the character perform an animation and waits until it's over.
            </summary>
            <param name="ent">Character to animate</param>
            <param name="anim">Animation to play</param>
            <example>
            GROUND:CharWaitAnim(player, "Hurt")
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.CharSetAction(RogueEssence.Ground.GroundChar,RogueEssence.Ground.GroundAction)">
            <summary>
            Set a character's action.
            </summary>
            <param name="chara">Character to perfomr the action</param>
            <param name="action">The action to perform</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.CharWaitAction">
            <summary>
            Makes the character perform an action and waits until it's over.
            </summary>
            <param name="ent">Character to animate</param>
            <param name="action">Action to perform</param>
            <example>
            GROUND:CharWaitAction(player, action)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.ObjectSetAnim(RogueEssence.Ground.GroundObject,System.Int32,System.Int32,System.Int32,RogueElements.Dir8,System.Int32)">
            <summary>
            Sets a ground object's animation.  After it finishes, it will return to the default animation.
            </summary>
            <param name="obj">The object to animate</param>
            <param name="frameTime">The duration of each frame of animation</param>
            <param name="startFrame">The start frame of animation</param>
            <param name="endFrame">The end frame of animation</param>
            <param name="dir">The direction of the animation</param>
            <param name="cycles">The number of times to repeat the animation</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.ObjectSetDefaultAnim(RogueEssence.Ground.GroundObject,System.String,System.Int32,System.Int32,System.Int32,RogueElements.Dir8)">
            <summary>
            Sets a ground object's default animation.
            </summary>
            <param name="obj">The object to animate</param>
            <param name="animName">The name of the animation</param>
            <param name="frameTime">The duration of each frame of animation</param>
            <param name="startFrame">The start frame of animation</param>
            <param name="endFrame">The end frame of animation</param>
            <param name="dir">The direction of the animation</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptGround.ObjectWaitAnimFrame">
            <summary>
            Waits for the object to reach a specific frame before continuing.
            </summary>
            <param name="obj">The object ot wait on</param>
            <param name="frame">The frame of animation to wait on.</param>
            <example>
            GROUND:WaitObjectAnim(fountain, 3)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.PlayVFX(RogueEssence.Content.FiniteEmitter,System.Int32,System.Int32,RogueElements.Dir8)">
            <summary>
            Plays a VFX using a finite emitter that generates BaseAnims.
            </summary>
            <param name="emitter">The VFX emitter</param>
            <param name="x">X position</param>
            <param name="y">Y Position</param>
            <param name="dir">Direction to orient the VFX, defaults to Down</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.PlayVFX(RogueEssence.Content.FiniteEmitter,System.Int32,System.Int32,RogueElements.Dir8,System.Int32,System.Int32)">
            <summary>
            Plays a VFX that has a start position and an end position.  It uses a finite emitter that generates BaseAnims.
            </summary>
            <param name="emitter">The VFX emitter</param>
            <param name="x">Start X position</param>
            <param name="y">Start Y Position</param>
            <param name="dir">Direction to orient the VFX, defaults to Down.</param>
            <param name="xTo">End X position</param>
            <param name="yTo">End Y position</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.PlayVFXAnim(RogueEssence.Content.BaseAnim,RogueEssence.Content.DrawLayer)">
            <summary>
            Plays a VFX using just a BaseAnim
            </summary>
            <param name="anim">The animation to play</param>
            <param name="layer">The layer to put it on</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.MoveScreen(RogueEssence.Content.ScreenMover)">
            <summary>
            Plays a screen-moving effect.
            </summary>
            <param name="mover">The screen mover.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.AddMapStatus(System.String)">
            <summary>
            Adds a mapstatus to the ground map.  Map statuses only have an aesthetic effect in ground maps.
            </summary>
            <param name="statusIdx">The ID of the Map Status</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptGround.RemoveMapStatus(System.String)">
            <summary>
            Removes a map status from the ground map.
            </summary>
            <param name="statusIdx">The ID of the Map Status to remove.</param>
        </member>
        <member name="T:RogueEssence.Script.ScriptServices">
            <summary>
            Component handling managing script services and various script related tasks
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptServices.CurrentScriptDir">
            <summary>
            Returns the script package path for the currently loaded level
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptServices.Publish(System.String,System.Object[])">
            <summary>
            Send a message to all the services listening for it.
            </summary>
            <param name="msgname">Name of the message</param>
            <param name="arguments">Value passed along the message</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptServices.SetupLuaFunctions(RogueEssence.Script.LuaEngine)">
            <summary>
            Installs some common lua functions.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptServices.AddService(System.String,NLua.LuaTable)">
            <summary>
            Add a service to the list of managed services
            </summary>
            <param name="name">Handle for the given service instance.</param>
            <param name="classpath">Class to instanciate the service from.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptServices.RemoveService(System.String)">
            <summary>
            Removes the given service from the service list
            </summary>
            <param name="name"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RogueEssence.Script.ScriptServices.GetService(System.String)" -->
        <member name="M:RogueEssence.Script.ScriptServices.ServiceDirectoryPath">
            <summary>
            Returns the path to the services directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptServices.Subscribe(System.String,System.String,NLua.LuaFunction)">
            <summary>
            Used to subscribe a lua function to be called on a pre-defined service callback for the given service.
            Essentially, use this to register lua callbacks for a lua service.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptServices.UnSubscribe(System.String,System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptServices.UpdateServices(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Sends the Update message to all services listening for it!
            </summary>
            <param name="gtime">Current game engine time.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.PlaySE(System.String)">
            <summary>
            Plays a sound effect
            </summary>
            <param name="name">Sound file name, relative to the Content/SE folder</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.PlayBattleSE(System.String)">
            <summary>
            Plays a sound effect specifically from the Battle/ subdirectory
            </summary>
            <param name="name">Sound file name, relative to the Content/SE/Battle folder</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptSound.WaitSE">
            <summary>
            Plays a sound effect, and waits for it to complete before continuing.
            </summary>
            <example>
            SOUND:WaitSE("Battle/Hit")
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.LoopSE(System.String)">
            <summary>
            Plays a continuous sound effect
            </summary>
            <param name="name">Sound file name, relative to the Content/SE folder</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.LoopBattleSE(System.String)">
            <summary>
            Plays a continuous sound effect
            </summary>
            <param name="name">Sound file name, relative to the Content/SE/Battle folder</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.StopSE(System.String)">
            <summary>
            Stops a continuous sound effect
            </summary>
            <param name="name">Sound file name, relative to the Content/SE folder</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.StopBattleSE(System.String)">
            <summary>
            Stops a continuous sound effect
            </summary>
            <param name="name">Sound file name, relative to the Content/SE/Battle folder</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.FadeInSE(System.String,System.Int32)">
            <summary>
            Plays a continuous sound effect, fading in over a specified amount of time
            </summary>
            <param name="name">Sound file name, relative to the Content/SE folder</param>
            <param name="fadeTime">Time in frames for the sound to fade in</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.FadeInBattleSE(System.String,System.Int32)">
            <summary>
            Plays a continuous sound effect, fading in over a specified amount of time
            </summary>
            <param name="name">Sound file name, relative to the Content/SE/Battle folder</param>
            <param name="fadeTime">Time in frames for the sound to fade in</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.FadeOutSE(System.String,System.Int32)">
            <summary>
            Stops a continuous sound effect, fading out over a specified amount of time
            </summary>
            <param name="name">Sound file name, relative to the Content/SE folder</param>
            <param name="fadeTime">Time in frames for the sound to fade out</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.FadeOutBattleSE(System.String,System.Int32)">
            <summary>
            Stops a continuous sound effect, fading out over a specified amount of time
            </summary>
            <param name="name">Sound file name, relative to the Content/SE/Battle folder</param>
            <param name="fadeTime">Time in frames for the sound to fade out</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.PlayFanfare(System.String)">
            <summary>
            Plays a sound effect that temporarily mutes the music for its duration
            </summary>
            <param name="name">Sound file name, relative to the Content/SE folder</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptSound.WaitFanfare">
            <summary>
            Plays a sound effect that temporarily mutes the music for its duration.
            This function waits for the sound to complete before continuing.
            </summary>
            <example>
            SOUND:WaitFanfare("Battle/LevelUp")
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.PlayBGM(System.String,System.Boolean,System.Int32)">
            <summary>
            Plays a song, replacing the current one.
            </summary>
            <param name="name">The file name of the song, relative to the Content/Music folder.</param>
            <param name="fade">Whether to fade the old song out, or start a new one.</param>
            <param name="fadeTime">The amount of time, in frames, to fade out the old song.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.StopBGM">
            <summary>
            Stops playing the current song.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.FadeOutBGM(System.Int32)">
            <summary>
            Fades out the current song.
            </summary>
            <param name="fadeTime">The amount of time, in frames, to fade out the song.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.SetBGMVolume(System.Single)">
            <summary>
            Sets the current volume of the song.
            </summary>
            <param name="val">A float value between 0 and 1</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptSound.GetCurrentSong">
            <summary>
            Gets the currently playing song.  If the current song is fading out, gets the next song to be played.
            </summary>
            <returns>The filename of the song, relative to the Content/Music folder</returns>
        </member>
        <member name="T:RogueEssence.Script.ScriptStrings">
            <summary>
            Class for handling loading localized string via xml, because lua xml libs sucks
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptStrings.LocaleCode">
            <summary>
            Gets the current language setting of the game.
            </summary>
            <returns>The current language, represented by a locale code.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptStrings.Format(System.String,System.Object[])">
            <summary>
            Formats a string.  Will unescape escaped characters.
            </summary>
            <param name="fmt">String to format.</param>
            <param name="para">Arguments</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptStrings.FormatKey(System.String,System.Object[])">
            <summary>
            Formats a string given a string key.  Will unescape escaped characters.
            </summary>
            <param name="fmt">The string key to format</param>
            <param name="para">string arguments</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptStrings.LocalKeyString(System.Int32)">
            <summary>
            Gets the string representing a button or key.
            </summary>
            <param name="index">The input type of the input.</param>
            <returns>The string representing the button o key the input maps to.</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptStrings.CreateList(NLua.LuaTable)">
            <summary>
            Builds a single string of comma separated elements.
            </summary>
            <param name="listStrings">LuaTable of strings containing the elements to build the list from.</param>
            <returns>The combined string containing all elements.</returns>
        </member>
        <member name="T:RogueEssence.Script.ScriptTask">
            <summary>
            Class grouping Task related functions exposed to the script engine.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptTask.StartEntityTask(RogueEssence.Ground.GroundEntity,NLua.LuaFunction)">
            <summary>
            Helper function to make an entity run the specified task.
            Will not replace a running task!
            Tasks are run interlocked with the script processing and game processing, and characters cannot run multiple tasks at the same time.
            </summary>
            <param name="ent">Entity which will run the task.</param>
            <param name="fn">Task coroutine.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptTask.StopEntityTask(RogueEssence.Ground.GroundEntity)">
            <summary>
            Helper function to force stop an entity's current task.
            </summary>
            <param name="ent">Entity running the task to stop.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptTask.WaitStartEntityTask">
            <summary>
            Makes an entity run a specified task, and waits for it to complete.
            </summary>
            <param name="ent">Entity which will run the task.</param>
            <param name="fn">Task coroutine.</param>
            <example>
            TODO
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptTask.WaitEntityTask">
            <summary>
            Waits for the specified entity to finish its task.
            </summary>
            <param name="ent">Entity which task we'll wait on.</param>
            <example>
            TASK:WaitEntityTask(player)
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptTask.WaitTask">
            <summary>
            Runs a task and waits for it to complete.
            Most methods that do not expose themselves to script need ot be wrapped with this.
            </summary>
            <param name="obj">The task to wait on.</param>
            <example>
            TASK:WaitTask(_DUNGEON:AddMapStatus("rain"))
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptTask.StartScriptLocalCoroutine(NLua.LuaFunction,System.Object[])">
            <summary>
            A wrapper around the StartCoroutine method of the GameManager, so lua coroutines can be executed locally to the script context.
            AKA, it will block the script execution while its executed.
            </summary>
            <param name="fn"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptTask.BranchCoroutine(System.Object)">
            <summary>
            Starts a new coroutine to run parallel to the current execution.
            Useful for performing multiple actions at once.
            </summary>
            <param name="obj">The task to run in parallel</param>
            <example>
            local coro1 = TASK:BranchCoroutine(GAME:_FadeIn(60))
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptTask.JoinCoroutines">
            <summary>
            Waits for all specified coroutines to finish before continuing execution.
            Often used for coroutines created using TASK:BranchCoroutine()
            </summary>
            <param name="coroTable">A table of coroutines to wait on.</param>
            <example>
            TASK:JoinCoroutines({coro1})
            </example>
        </member>
        <member name="T:RogueEssence.Script.ScriptUI.ChoicePair">
            <summary>
            Used to store a list of choice and their return value for most multi-choice menus.
            </summary>
        </member>
        <member name="F:RogueEssence.Script.ScriptUI.WaitInput">
            <summary>
            Waits for the player to press a button before continuing.
            </summary>
        </member>
        <member name="F:RogueEssence.Script.ScriptUI.WaitShowDialogue">
            <summary>
            Displays a dialogue box with text, waiting until the player completes it.
            Takes a string as an argument.
            </summary>
            <param name="text">The text to display.</param>
            <example>
            UI:WaitShowDialogue("Hello World!")
            </example>
        </member>
        <member name="F:RogueEssence.Script.ScriptUI.WaitShowTimedDialogue">
            <summary>
            Displays a dialogue box with text, waiting until the specified time has expired.
            </summary>
            <param name="text">The text to display.</param>
            <param name="waitTime">The time for the textbox to remain on screen. Pass -1 to wait for layer input.</param>
            <example>
            UI:WaitShowTimedDialogue("Hello World!", 120)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.TextDialogue(System.String,System.Int32)">
            <summary>
            Sets the current dialogue text to be shown.  Requires WaitDialog to actually display.
            </summary>
            <param name="text">The text to display.</param>
            <param name="waitTime">The time for the textbox to remain on screen. Pass -1 to wait for layer input.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptUI.WaitShowVoiceOver">
            <summary>
            Displays a voice over, waiting until the player completes it.
            </summary>
            <param name="text">The text to display.</param>
            <param name="expireTime">The time for the textbox to remain on screen. Pass -1 to wait for layer input.</param>
            <example>
            UI:WaitShowVoiceOver("Hello World!", 120)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.TextVoiceOver(System.String,System.Int32)">
            <summary>
            Sets the current voice-over text to be shown.  Requires WaitDialog to actually display.
            </summary>
            <param name="text">The text to display.</param>
            <param name="expireTime">The time for the textbox to remain on screen. Pass -1 to wait for layer input.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.TextPopUp(System.String,System.Int32)">
            <summary>
            Makes text pop up in the bottom-left corner. Displays concurrently with any other process.
            </summary>
            <param name="text">The text to display.</param>
            <param name="expireTime">The time for the textbox to remain on screen.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptUI.WaitShowTitle">
            <summary>
            Fades in a title text, waiting until the fade-in is complete.
            </summary>
            <param name="text">The text to display.</param>
            <param name="time">The time for the text to fade in.</param>
            <example>
            UI:WaitShowTitle("Hello World!", 60)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.TextShowTitle(System.String,System.Int32)">
            <summary>
            Shows text in the format of a title drop.  Requires WaitDialog to actually display.
            </summary>
            <param name="text">The text to display.</param>
            <param name="time">The time for the text to fade in.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptUI.WaitHideTitle">
            <summary>
            Fades out the currently displayed title, waiting until the fade-out is complete.
            </summary>
            <param name="time">The time for the text to fade in.</param>
            <example>
            UI:WaitHideTitle(60)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.TextFadeTitle(System.Int32)">
            <summary>
            Fades out the text set in a title drop.  Requires WaitDialog to actually fade.
            </summary>
            <param name="time">The time for the text to fade in.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptUI.WaitShowBG">
            <summary>
            Fades in a chosen background image, with a chosen framerate, at a certain fade time, waiting until the fade-in is complete.
            </summary>
            <param name="bg">The background to show, from the list of BG textures.</param>
            <param name="frameTime">Framerate of the image animation.</param>
            <param name="fadeInTime">Time taken to fade in the image.</param>
            <example>
            UI:WaitShowBG("TestBG", 3, 60)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ShowBG(System.String,System.Int32,System.Int32)">
            <summary>
            Sets an image to display.  Requires WaitDialog to actually display.
            </summary>
            <param name="bg">The background to show, from the list of BG textures.</param>
            <param name="frameTime">Framerate of the image animation.</param>
            <param name="fadeInTime">Time taken to fade in the image.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptUI.WaitHideBG">
            <summary>
            Fades out the current background image, waiting until the fade-out is complete.
            </summary>
            <param name="time">Time taken to fade out the image.</param>
            <example>
            UI:WaitHideBG(60)
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.FadeBG(System.Int32)">
            <summary>
            Prepares a fade-out of the current image.  Requires WaitDialog to actually display.
            </summary>
            <param name="time">Time taken to fade out the image.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ResetSpeaker(System.Boolean)">
            <summary>
            Clears the current speaker, so none is displayed the next time TextDialogue is called.
            This also resets any custom dialogue box positions, portrait positions, and choice positions.
            </summary>
            <param name="keysound">If turned on, the text from the dialogue boxes make sounds.  Default is on.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetSpeaker(System.String,System.Boolean,System.String,System.Int32,System.String,RogueEssence.Data.Gender)">
            <summary>
            Sets the speaker to be displayed during the following calls to the TextDialogue functions.  It resets speaker emotion.
            </summary>
            <param name="name">Speaker name.</param>
            <param name="keysound">Plays sounds when text appears.</param>
            <param name="specie">Species of the speaker</param>
            <param name="form">Form of the speaker</param>
            <param name="skin">Skin of the speaker</param>
            <param name="gender">Gender of the speaker</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetSpeaker(RogueEssence.Ground.GroundChar,System.Boolean)">
            <summary>
            Sets the speaker to be displayed during the following calls to the TextDialogue functions.  It resets speaker emotion.
            </summary>
            <param name="chara">Character to set as speaker. This is a character in a ground map.</param>
            <param name="keysound">Plays sounds when text appears.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetSpeaker(RogueEssence.Dungeon.Character,System.Boolean)">
            <summary>
            Sets the speaker to be displayed during the following calls to the TextDialogue functions.  It resets speaker emotion.
            </summary>
            <param name="chara">Character to set as speaker. This is a character in a dungeon map.</param>
            <param name="keysound">Plays sounds when text appears.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetSpeakerReverse(System.Boolean)">
            <summary>
            Reverses the speaker orientation to face left instead of right.  This depends on the boolean passed in.
            </summary>
            <param name="reverse">Faces right if false, left if true.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetChoiceLoc(System.Int32,System.Int32)">
            <summary>
            Sets the position of the choices for a question dialog.
            </summary>
            <param name="x">The X position</param>
            <param name="y">The Y position</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ResetChoiceLoc">
            <summary>
            Sets the position of the choices for a question dialog back to default.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the position and size of the dialogue box.
            </summary>
            <param name="x">The X position of the box</param>
            <param name="y">The Y position of the box</param>
            <param name="width">Width of the box</param>
            <param name="height">Height of the box</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ResetBounds">
            <summary>
            Resets the position and size of the dialogue box.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetSpeakerLoc(System.Int32,System.Int32)">
            <summary>
            Sets the position of the speaker in a dialogue box.
            </summary>
            <param name="x">The X position</param>
            <param name="y">The Y position</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ResetSpeakerLoc">
            <summary>
            Resets the position of the speaker in a dialogue box.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetSpeakerEmotion(System.String,System.Boolean)">
            <summary>
            Sets the emotion of the speaker in the dialogue box.
            </summary>
            <param name="emo">Emotion to display</param>
            <param name="reverse">Faces right if false, left if true.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetCenter(System.Boolean,System.Boolean)">
            <summary>
            Sets the centering of the text in the textbox.
            </summary>
            <param name="centerH">Horizontal centering</param>
            <param name="centerV">Vertical centering</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetAutoFinish(System.Boolean)">
            <summary>
            Makes the text automatically finish when it shows up.
            </summary>
            <param name="autoFinish">Auto-finishes text if true.</param>
        </member>
        <member name="F:RogueEssence.Script.ScriptUI.WaitDialog">
            <summary>
            Displays the currently set dialogue box and waits for the player to complete it.
            </summary>
            <example>
            UI:WaitDialog()
            </example>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI._DummyWait">
            <summary>
            Instantly break. Used as default/invalid value when returning a yieldable value.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ChoiceMenuYesNo(System.String,System.Boolean)">
             <summary>
             Ask a question answered by yes or no via character dialogue to the player.
             UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
             and for execution to suspend until the choice is returned.
             Then to recover the integer value indicating the result of the menu, UI:ChoiceResult() must be called.
            
             The Yes/No menu returns 1 for yes, and 0 for no.
             </summary>
             <param name="message">Question to be asked to the user.</param>
             <param name="bdefaultstono">Whether the cursor starts on no by default</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.NameMenu(System.String,System.String,System.Int32)">
            <summary>
            Displays the name input box.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the string value indicating the result of the menu, UI:ChoiceResult() must be called.
            </summary>
            <param name="title">The text to show above the input line.</param>
            <param name="desc">The text to show below the input line.</param>
            <param name="maxLength">The length of the text in pixels.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.AssemblyMenu">
            <summary>
            Displays a menu for replacing party members with the assembly.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the boolean value indicating whether the team composition was changed or not, UI:ChoiceResult() must be called.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ShopMenu(NLua.LuaTable)">
            <summary>
            Displays the Shop menu.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the table indicating the indices of items chosen, UI:ChoiceResult() must be called.
            </summary>
            <param name="goods">A table of items to be sold.  The format is { Item=InvItem, Price=int } for each item.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SellMenu">
            <summary>
            Displays the Sell menu.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the table indicating the indices of items to sell, UI:ChoiceResult() must be called.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.StorageMenu">
            <summary>
            Displays the Storage menu for which to exchange items in the inventory with.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the menu is exited.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.WithdrawMenu">
            <summary>
            Displays the Storage menu for which to withdraw from.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the menu is exited.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.BankMenu">
            <summary>
            Displays the Bank menu.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the menu is exited.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SpoilsMenu(NLua.LuaTable)">
            <summary>
            Displays the Spoils menu.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the menu is exited.
            </summary>
            <param name="appraisalMap">A table of mappings from containers to items, in the format of { Box=InvItem , Item=InvItem }</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.AppraiseMenu">
            <summary>
            Displays the Appraisal menu.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the table indicating the indices of items chosen, UI:ChoiceResult() must be called.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.TutorTeamMenu">
            <summary>
            Displays the Tutor Team menu.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the integer representing the chosen team member, UI:ChoiceResult() must be called.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.RelearnMenu(RogueEssence.Dungeon.Character)">
            <summary>
            Displays the Relearn menu for a character.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the integer representing the chosen skill, UI:ChoiceResult() must be called.
            </summary>
            <param name="chara">The character to relearn skills</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.LearnMenu(RogueEssence.Dungeon.Character,System.String)">
            <summary>
            Displays the Learn menu for a character to replace an existing skill with a new one.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the integer representing the chosen skill, UI:ChoiceResult() must be called.
            </summary>
            <param name="chara">The character to relearn skills</param>
            <param name="skillNum">The new skill</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ForgetMenu(RogueEssence.Dungeon.Character)">
            <summary>
            Displays the Forget menu for a character to forget a skill.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the integer representing the chosen skill, UI:ChoiceResult() must be called.
            </summary>
            <param name="chara">The character to relearn skills</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ShowPromoteMenu">
            <summary>
            Displays the Promote menu to choose a team member to promote.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the integer representing the chosen team slot, UI:ChoiceResult() must be called.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.CanSwapMenu(NLua.LuaTable)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SwapMenu(NLua.LuaTable,NLua.LuaTable)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.TributeMenu(System.Int32)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ShowMusicMenu(NLua.LuaTable)">
            <summary>
            Displays the Music menu to browse music for the game.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the string representing the chosen song, UI:ChoiceResult() must be called.
            </summary>
            <param name="spoilerUnlocks">A lua table of strings representing progression flags that have been completed.
            Any ogg file that uses this tag as a spoiler tag will display in the menu only if the flag has been passed.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.DungeonChoice(System.String,RogueEssence.Dungeon.ZoneLoc)">
             <summary>
             Ask to enter a destintion via character dialogue to the player.
             UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
             and for execution to suspend until the choice is returned.
             Then to recover the integer value indicating the result of the menu, UI:ChoiceResult() must be called.
            
             The Yes/No menu returns 1 for yes, and 0 for no.
             </summary>
             <param name="name">Name of the destination</param>
             <param name="dest">The ZoneLoc location of the destination.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.DestinationMenu(NLua.LuaTable)">
            <summary>
            Marks the start of a choice menu for choosing destinations, showing a preview of restrictions and requirements for dungeons.
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the ZoneLoc indicating the chosen destination, UI:ChoiceResult() must be called.
            </summary>
            <param name="destinations">A lua table representing the list of destinations with each element in the format of { Name=string, Dest=ZoneLoc }</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ServersMenu">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ContactsMenu">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SOSMenu">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.AOKMenu">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.PeersMenu">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ShowConnectMenu">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.CurrentActivityMenu">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ChooseMonsterMenu(System.String,NLua.LuaTable,System.Boolean,System.Boolean)">
            <summary>
            Marks the start of a choice menu for choosing monsters, showing a preview of their appearances via portrait.
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the string indicating the chosen species, UI:ChoiceResult() must be called.
            </summary>
            <param name="title">The title of the menu</param>
            <param name="choices">A lua table of choices with each element being a MonsterID.</param>
            <param name="canMenu">If set to true, the Menu Button exits the menu if pressed.</param>
            <param name="canCancel">If set to true, the Cancel Button exits the menu if pressed.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.SetCustomMenu(RogueEssence.Menu.InteractableMenu)">
            <summary>
            Displays a custom menu of the caller's choice.
            
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the menu is exited.
            </summary>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.BeginChoiceMenu(System.String,NLua.LuaTable,System.Object,System.Object)">
            <summary>
            Marks the start of a multi-choice menu.
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the integer value indicating the result of the menu, UI:ChoiceResult() must be called.
            </summary>
            <param name="message">The question to ask the user.</param>
            <param name="choicesPairs">A table of choices.  Each choice can be either a string, or { string, bool } representing the text and enabled status.</param>
            <param name="defaultChoice">The cursor starts on this choice.</param>
            <param name="cancelChoice">This choice is chosen if the player presses the cancel button.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.BeginMultiPageMenu(System.Int32,System.Int32,System.Int32,System.String,NLua.LuaTable,System.Int32,System.Object,System.Object)">
            <summary>
            Marks the start of a multi-paged choice menu.
            UI:WaitForChoice() must be called afterwards for the menu to be actually displayed,
            and for execution to suspend until the choice is returned.
            Then to recover the integer value indicating the result of the menu, UI:ChoiceResult() must be called.
            </summary>
            <param name="x">X position of the menu</param>
            <param name="y">Y position of the menu</param>
            <param name="width">Width of the menu</param>
            <param name="title">Height of the menu</param>
            <param name="choicesPairs">A table of choices.  Each choice can be either a string, or { string, bool } representing the text and enabled status.</param>
            <param name="linesPerPage">Number of choices per page</param>
            <param name="defaultChoice">The cursor starts on this choice.</param>
            <param name="cancelChoice">This choice is chosen if the player presses the cancel button.</param>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.ChoiceResult">
            <summary>
            Get the result of the last choice menu
            </summary>
            <returns>The result of the choice</returns>
        </member>
        <member name="M:RogueEssence.Script.ScriptUI.GetChoiceAction(System.Object)">
            <summary>
            It's complicated.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.Script.ScriptUI.WaitForChoice">
            <summary>
            Displays the currently set choice menu and waits for the player's selection to complete.
            </summary>
            <example>
            UI:WaitForChoice()
            </example>
        </member>
        <member name="F:RogueEssence.Menu.DialogueBox.SPEAK_FRAMES">
            <summary>
            frames between speech blip
            </summary>
        </member>
        <member name="F:RogueEssence.Menu.DialogueText.textColor">
            <summary>
            Text color starts and stops.
            </summary>
        </member>
        <member name="F:RogueEssence.Menu.DialogueText.trimmedStarts">
            <summary>
            The amount of space to trim when the lines were broken up.
            </summary>
        </member>
        <member name="F:RogueEssence.Menu.DialogueText.fullLines">
            <summary>
            Formatted lines after breaking the text down and trimming the spaces at the edges.
            </summary>
        </member>
        <member name="F:RogueEssence.Menu.DialogueText.formattedTextLength">
            <summary>
            The sum of the length of all lines in fullLines.  Saves computation.
            </summary>
        </member>
        <member name="M:RogueEssence.Menu.DialogueText.SplitFormattedText(System.String,RogueElements.Rect,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Splits the text into multiple textboxes worth of text, or just one if it can fit in the textbox.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:RogueEssence.Menu.DialogueText.SetAndFormatText(System.String)">
            <summary>
            Sets the text and formats/spaces it properly.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:RogueEssence.Menu.DialogueText.GetLineTrim(System.Int32)">
            <summary>
            When a text is broken up into lines, some trimming occurs at the beginning.  This obtains that value so callers can keep in sync with the character position mappings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Menu.AssemblyMenu.Choose(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index">Represents the true index, not the one on display</param>
            <param name="assembly"></param>
        </member>
        <member name="M:RogueEssence.Menu.AssemblyMenu.CanChooseAssembly(System.Int32)">
            <summary>
            
            </summary>
            <param name="choice">Choice must be premapped.</param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.Menu.AssemblyMenu.ChooseAssembly(System.Int32)">
            <summary>
            
            </summary>
            <param name="choice">Choice must be pre-mapped</param>
        </member>
        <member name="M:RogueEssence.Menu.AssemblyMenu.ReleaseAssembly(System.Int32)">
            <summary>
            
            </summary>
            <param name="choice">Choice must be premapped</param>
        </member>
        <member name="P:RogueEssence.PathMod.Mods">
            <summary>
            Filename of mod relative to executable
            </summary>
        </member>
        <member name="M:RogueEssence.PathMod.GetRelativePath(System.String)">
            <summary>
            Takes a full path and returns a new path that is relative to the executable folder.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.PathMod.DiffModVersions(System.Collections.Generic.List{RogueEssence.ModVersion},System.Collections.Generic.List{RogueEssence.ModVersion})">
            <summary>
            Returns a diff list of mod versions preserving order as much as possible.
            </summary>
            <param name="oldVersion"></param>
            <param name="newVersion"></param>
            <returns></returns>
        </member>
        <member name="F:RogueEssence.ModHeader.Path">
            <summary>
            Must always be a relative path
            </summary>
        </member>
        <member name="T:RogueEssence.CoroutineManager">
            <summary>
            Runs multiple scheduled coroutines cooperatively
            </summary>
        </member>
        <member name="F:RogueEssence.CoroutineManager.m_coroutines">
            <summary>
            Contains the list of coroutines to be executed.
            </summary>
        </member>
        <member name="F:RogueEssence.CoroutineManager.m_currentcontextidx">
            <summary>
            The context currently being run. Used to determine if we should enqueue a coroutine
            to the one currently being executed if a StartCoroutine is encountered within
            the routine being executed.
            </summary>
        </member>
        <member name="M:RogueEssence.CoroutineManager.StartCoroutine(System.Collections.Generic.IEnumerator{RogueEssence.YieldInstruction})">
            <summary>
            Compatibility function to be more compatible with the GameManager's coroutines.
            Runs a coroutine inside the current coroutine context.
            </summary>
            <param name="coro"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.CoroutineManager.Update">
            <summary>
            Updates all scheduled coroutines for a single frame.
            </summary>
        </member>
        <member name="M:RogueEssence.CoroutineManager.execStack(System.Collections.Generic.Stack{RogueEssence.Coroutine})">
            <summary>
            Runs a single sheduled coroutine's stack.
            </summary>
            <param name="cocontext"></param>
        </member>
        <member name="M:RogueEssence.CoroutineManager.checkCoroutine(System.Collections.Generic.Stack{RogueEssence.Coroutine})">
            <summary>
            Checks to see if the calling coroutine can also continue to finish.
            </summary>
            <param name="cocontext"></param>
        </member>
        <member name="M:RogueEssence.GameManager.WaitSE(System.String)">
            <summary>
            Plays a sound effect and waits until it's over
            </summary>
            <param name="newSE"></param>
            <returns></returns>
        </member>
        <member name="M:RogueEssence.GameManager.MoveToGround(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Enter a ground map by name, and makes the player spawn at the specified named marker
            </summary>
            <param name="zone"></param>
            <param name="mapname"></param>
            <param name="entrypoint"></param>
            <param name="preserveMusic"></param>
            <returns></returns>
        </member>
        <member name="T:RectPacker.Atlas">
            <summary>
            Represents the contents of a sprite image.
            </summary>
        </member>
        <member name="P:RectPacker.Atlas.MappedImages">
            <summary>
            Holds the locations of all the individual images within the sprite image.
            </summary>
        </member>
        <member name="P:RectPacker.Atlas.Width">
            <summary>
            Width of the sprite image
            </summary>
        </member>
        <member name="P:RectPacker.Atlas.Height">
            <summary>
            Height of the sprite image
            </summary>
        </member>
        <member name="P:RectPacker.Atlas.Area">
            <summary>
            Area of the sprite image
            </summary>
        </member>
        <member name="M:RectPacker.Atlas.AddMappedImage(RectPacker.MappedImageInfo)">
            <summary>
            Adds a Rectangle to the SpriteInfo, and updates the width and height of the SpriteInfo.
            </summary>
            <param name="imageLocation"></param>
        </member>
        <member name="T:RectPacker.Canvas">
            <summary>
            This type of canvas places rectangles as far to the left as possible (lowest X).
            If there is a choice between locations with the same X, it will pick the one with the 
            lowest Y.
            </summary>
        </member>
        <member name="F:RectPacker.Canvas.INFINITE_SIZE">
            <summary>
            Value denoting an unlimited width or height. You would pass this in to SetCanvasDimensions.
            </summary>
        </member>
        <member name="M:RectPacker.Canvas.SetCanvasDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the dimensions of the canvas.
            If there were already rectangles on the canvas when this is called, those rectangles will be removed.
            
            Be sure to call this method before you call AddRectangle for the first time.
            </summary>
            <param name="canvasWidth">New width of the canvas</param>
            <param name="canvasHeight">New height of the canvas</param>
        </member>
        <member name="M:RectPacker.Canvas.AddRectangle(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Adds a rectangle
            </summary>
            <param name="rectangleWidth">Width of the rectangle</param>
            <param name="rectangleHeight">Height of the rectangle</param>
            <param name="rectangleXOffset">X position where rectangle has been placed</param>
            <param name="rectangleYOffset">Y position where rectangle has been placed</param>
            <param name="lowestFreeHeightDeficit">
            Lowest free height deficit for all the rectangles placed since the last call to SetCanvasDimensions.
            
            This will be set to Int32.MaxValue if there was never any free height deficit.
            </param>
            <returns>
            true: rectangle placed
            false: rectangle not placed because there was no room
            </returns>
        </member>
        <member name="M:RectPacker.Canvas.FreeHeightDeficit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Works out the free height deficit when placing a rectangle with a required height at a given offset.
            
            If the free height deficit is 0 or negative, there may be room to place the rectangle (still need to check for blocking
            occupied cells).
            
            If the free height deficit is greater than 0, you're too close to the top edge of the canvas to place the rectangle.
            </summary>
            <param name="canvasHeight"></param>
            <param name="offsetY"></param>
            <param name="requiredHeight"></param>
            <returns></returns>
        </member>
        <member name="M:RectPacker.Canvas.PlaceRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the cell at x,y to occupied, and also its top and right neighbours, as needed
            to place a rectangle with the given width and height.
            
            If the rectangle takes only part of a row or column, they are split.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="requiredWidth"></param>
            <param name="requiredHeight"></param>
            <param name="nbrRequiredCellsHorizontally">
            Number of cells that the rectangle requires horizontally
            </param>
            <param name="nbrRequiredCellsVertically">
            Number of cells that the rectangle requires vertically
            </param>
            <param name="leftOverWidth">
            The amount of horizontal space left in the right most cells that could be used for the rectangle
            </param>
            <param name="leftOverHeight">
            The amount of vertical space left in the bottom most cells that could be used for the rectangle
            </param>
        </member>
        <member name="M:RectPacker.Canvas.IsAvailable(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns true if a rectangle with the given width and height can be placed
            in the cell with the given x and y, and its right and top neighbours.
            
            This method assumes that x,y is far away enough from the edges of the canvas
            that the rectangle could actually fit. So this method only looks at whether cells
            are occupied or not.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="requiredWidth"></param>
            <param name="requiredHeight"></param>
            <param name="nbrRequiredCellsHorizontally">
            Number of cells that the rectangle requires horizontally
            </param>
            <param name="nbrRequiredCellsVertically">
            Number of cells that the rectangle requires vertically
            </param>
            <param name="leftOverWidth">
            The amount of horizontal space left in the right most cells that could be used for the rectangle
            </param>
            <param name="leftOverHeight">
            The amount of vertical space left in the bottom most cells that could be used for the rectangle
            </param>
            <returns></returns>
        </member>
        <member name="M:RectPacker.Canvas.GetStatistics(RectPacker.CanvasStats)">
            <summary>
            The canvas keeps statistics, on for example the number of times a FreeAreas is generated.
            Use this method to fill an object that implements ICanvasStats with these statistics.
            
            Note that calling SetCanvasDimensions resets all counters.
            </summary>
            <param name="canvasStats">
            Reference to object to be filled.
            
            If this is null, nothing happens (so there is no exception).
            </param>
        </member>
        <member name="T:RectPacker.CanvasStats">
            <summary>
            Statistics gathered by a canvas.
            </summary>
        </member>
        <member name="P:RectPacker.CanvasStats.RectangleAddAttempts">
            <summary>
            Number of times an attempt was made to add an image to the canvas used by the mapper.
            </summary>
        </member>
        <member name="P:RectPacker.CanvasStats.NbrCellsGenerated">
            <summary>
            Number of cells generated by the canvas.
            </summary>
        </member>
        <member name="P:RectPacker.CanvasStats.LowestFreeHeightDeficit">
            <summary>
            See ICanvasStats
            </summary>
        </member>
        <member name="T:RectPacker.DynamicTwoDimensionalArray`1">
            <summary>
            Implements a two dimensional dynamic array with elements of type T.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RectPacker.DynamicTwoDimensionalArray`1.Dimension">
            <summary>
            Describes a row or column
            </summary>
        </member>
        <member name="P:RectPacker.DynamicTwoDimensionalArray`1.NbrColumns">
            <summary>
            Number of columns
            </summary>
        </member>
        <member name="P:RectPacker.DynamicTwoDimensionalArray`1.NbrRows">
            <summary>
            Number of rows
            </summary>
        </member>
        <member name="M:RectPacker.DynamicTwoDimensionalArray`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RectPacker.DynamicTwoDimensionalArray`1.Initialize(System.Int32,System.Int32,System.Int32,System.Int32,`0)">
            <summary>
            After you've constructed the array, you need to initialize it.
            
            This removes any content and creates the first cell - so the array
            will have height is 1 and width is 1.
            </summary>
            <param name="capacityX">
            The array will initially have capacity for at least this many columns. 
            Must be greater than 0.
            Set to the expected maximum width of the array or greater.
            The array will resize itself if you make this too small, but resizing is expensive.
            </param>
            <param name="capacityY">
            The array will initially have capacity for at least this many rows.
            Must be greater than 0.
            Set to the expected maximum height of the array or greater.
            The array will resize itself if you make this too small, but resizing is expensive.
            </param>
            <param name="firstColumnWidth">
            Width of the first column.
            </param>
            <param name="firstRowHeight">
            Width of the first column.
            </param>
            <param name="firstCellValue">
            Width of the first column.
            </param>
        </member>
        <member name="M:RectPacker.DynamicTwoDimensionalArray`1.Item(System.Int32,System.Int32)">
            <summary>
            Returns the item at the given location.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:RectPacker.DynamicTwoDimensionalArray`1.SetItem(System.Int32,System.Int32,`0)">
            <summary>
            Sets an item to the given value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="value"></param>
        </member>
        <member name="M:RectPacker.DynamicTwoDimensionalArray`1.InsertRow(System.Int32,System.Int32)">
            <summary>
            Inserts a row at location y.
            If y equals 2, than all rows at y=3 and higher will now have y=4 and higher.
            The new row will have y=3.
            The contents of the row at y=2 will be copied to the row at y=3.
            
            If there is not enough capacity in the array for the additional row,
            than the internal data structure will be copied to a structure with twice the size
            (this copying is expensive).
            </summary>
            <param name="y">
            Identifies the row to be split.
            </param>
            <param name="heightNewRow">
            The height of the new row (the one at y=3 in the example).
            Must be smaller than the current height of the existing row.
            
            The old row will have height = (old height of old row) - (height of new row). 
            </param>
        </member>
        <member name="M:RectPacker.DynamicTwoDimensionalArray`1.InsertColumn(System.Int32,System.Int32)">
            <summary>
            Same as InsertRow, but than for columns.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:RectPacker.DynamicTwoDimensionalArray`1.ColumnWidth(System.Int32)">
            <summary>
            Returns the width of the column at the given location
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:RectPacker.DynamicTwoDimensionalArray`1.RowHeight(System.Int32)">
            <summary>
            Returns the height of the row at the given location
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:RectPacker.DynamicTwoDimensionalArray`1.IncreaseCapacity">
            <summary>
            Doubles the capacity of the internal data structures.
            
            Creates a new array with double the width and height of the old array.
            Copies the element of the old array to the new array.
            Then replaces the old array with the new array.
            </summary>
        </member>
        <member name="M:RectPacker.DynamicTwoDimensionalArray`1.ToString">
            <summary>
            Represents the DynamicTowDimensionalArray as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RectPacker.ImageInfo">
            <summary>
            Describes an image. Note that this only defines those properties that are relevant when
            it comes to mapping an image onto a sprite - its width and height. So for example image file
            name is not needed here.
            
            This is called IImageInfo rather than IImage, because System.Drawing already defines an Image class.
            </summary>
        </member>
        <member name="T:RectPacker.OptimalMapper">
            <summary>
            An IMapper takes a series of images, and figures out how these could be combined in a sprite.
            It returns the dimensions that the sprite will have, and the locations of each image within that sprite.
            
            This object does not create the sprite image itself. It only figures out how it needs to be constructed.
            </summary>
        </member>
        <member name="M:RectPacker.OptimalMapper.#ctor(RectPacker.Canvas,System.Single,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="canvas">Canvas object to use to map the images</param>
            <param name="cutoffEfficiency">
            When the object's Mapping method produces a candidate sprite with this efficiency or higher, it stops
            trying to get a better one and returns the sprite.
            
            Set this to for example 0.9 if that efficiency is good enough for you. 
            Set to 1.0 or higher if you want the most efficient sprite.
            </param>
            <param name="maxNbrCandidateSprites">
            The maximum number of candidate sprites that will be generated by the Mapping method.
            Set this to 1 if you want it to return the very first sprite that it manages to generate.
            If you want it to try to generate no more than 2 sprites before returning the best one, set this to 2, etc.
            Set to Int32.MaxValue if you don't want any restrictions on the number of candidate sprites generated.
            
            If you set cutoff Efficiency to less than 1, and maxNbrCandidateSprites to less than Int32.MaxValue,
            the Mapper method will stop trying to get a better sprite the moment it hits one of these limitations.
            </param>
        </member>
        <member name="M:RectPacker.OptimalMapper.Mapping(System.Collections.Generic.IEnumerable{RectPacker.ImageInfo})">
            <summary>
            Works out how to map a series of images into a sprite.
            </summary>
            <param name="images">
            The list of images to place into the sprite.
            </param>
            <returns>
            A SpriteInfo object. This describes the locations of the images within the sprite,
            and the dimensions of the sprite.
            </returns>
        </member>
        <member name="M:RectPacker.OptimalMapper.CandidateCanvasFeasable(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@,System.Boolean@)">
            <summary>
            Works out whether there is any point in trying to fit the images on a canvas
            with the given width and height.
            </summary>
            <param name="canvasMaxWidth">Candidate canvas width</param>
            <param name="canvasMaxHeight">Candidate canvas height</param>
            <param name="bestSpriteArea">Area of the smallest sprite produces so far</param>
            <param name="totalAreaAllImages">Total area of all images</param>
            <param name="candidateBiggerThanBestSprite">true if the candidate canvas is bigger than the best sprite so far</param>
            <param name="candidateSmallerThanCombinedImages">true if the candidate canvas is smaller than the combined images</param>
            <returns></returns>
        </member>
        <member name="M:RectPacker.OptimalMapper.MappingRestrictedBox(System.Linq.IOrderedEnumerable{RectPacker.ImageInfo},System.Int32,System.Int32,RectPacker.CanvasStats,System.Int32@)">
            <summary>
            Produces a mapping to a sprite that has given maximum dimensions.
            If the mapping can not be done inside those dimensions, returns null.
            </summary>
            <param name="images">
            List of image infos. 
            
            This method will not sort this list. 
            All images in this collection will be used, regardless of size.
            </param>
            <param name="maxWidth">
            The sprite won't be wider than this.
            </param>
            <param name="maxHeight">
            The generated sprite won't be higher than this.
            </param>
            <param name="canvasStats">
            The statistics produced by the canvas. These numbers are since the last call to its SetCanvasDimensions method.
            </param>
            <param name="lowestFreeHeightDeficitTallestRightFlushedImage">
            The lowest free height deficit for the images up to and including the tallest rectangle whose right hand border sits furthest to the right
            of all images.
            
            This is the minimum amount by which the height of the canvas needs to be increased to accommodate that rectangle.
            if the width of the canvas is decreased to one less than the width now taken by images.
            
            Note that providing the additional height might get some other (not right flushed) image to be placed higher, thereby
            making room for the flushed right image.
            
            This will be set to Int32.MaxValue if there was never any free height deficit.
            </param>
            <returns>
            The generated sprite.
            
            null if not all the images could be placed within the size limitations.
            </returns>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.#ctor">
            <summary>
            Initialize a QuadTree covering the full range of values possible
            </summary>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.#ctor(System.Drawing.Rectangle)">
            <summary>
            Creates a QuadTree for the specified area.
            </summary>
            <param name="rect">The area this QuadTree object will encompass.</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a QuadTree for the specified area.
            </summary>
            <param name="x">The top-left position of the area rectangle.</param>
            <param name="y">The top-right position of the area rectangle.</param>
            <param name="width">The width of the area rectangle.</param>
            <param name="height">The height of the area rectangle.</param>
        </member>
        <member name="P:QuadTrees.Common.QuadTreeCommon`3.QuadRect">
            <summary>
            Gets the Rectangle that bounds this QuadTree
            </summary>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.GetObjects(`2)">
            <summary>
            Get the objects in this tree that intersect with the specified rectangle.
            </summary>
            <param name="rect">The Rectangle to find objects in.</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.EnumObjects(`2)">
            <summary>
            Query the QuadTree and return an enumerator for the results
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.GetObjects(`2,System.Collections.Generic.List{`0})">
            <summary>
            Get the objects in this tree that intersect with the specified rectangle.
            </summary>
            <param name="rect">The Rectangle to find objects in.</param>
            <param name="results">A reference to a list that will be populated with the results.</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.GetAllObjects">
            <summary>
            Get all objects in this Quad, and it's children.
            </summary>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.Move(`0)">
            <summary>
            Moves the object in the tree
            </summary>
            <param name="item">The item that has moved</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="P:QuadTrees.Common.QuadTreeCommon`3.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:QuadTrees.Common.QuadTreeCommon`3.CountNodes">
            <summary>
            Count the number of nodes in the tree
            </summary>
        </member>
        <member name="P:QuadTrees.Common.QuadTreeCommon`3.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Remove all objects matching an expression (lambda)
            </summary>
            <param name="whereExpr"></param>
            <returns></returns>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of objects to the Quad Tree
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeCommon`3.TreeStats(System.Int32@,System.Int32@)">
            <summary>
            Get stats from the tree
            </summary>
            <param name="internalNodes"></param>
            <param name="leafNodes"></param>
        </member>
        <member name="P:QuadTrees.Common.QuadTreeNodeCommon.QuadRect">
            <summary>
            The area this QuadTree represents.
            </summary>
        </member>
        <member name="P:QuadTrees.Common.QuadTreeNodeCommon`3.Count">
            <summary>
            How many total objects are contained within this QuadTree (ie, includes children)
            </summary>
        </member>
        <member name="P:QuadTrees.Common.QuadTreeNodeCommon`3.CountNodes">
            <summary>
            Count all nodes in the graph (Edge + Leaf)
            </summary>
        </member>
        <member name="P:QuadTrees.Common.QuadTreeNodeCommon`3.IsEmpty">
            <summary>
            Returns true if this is a empty leaf node
            </summary>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.#ctor(System.Drawing.Rectangle)">
            <summary>
            Creates a QuadTree for the specified area.
            </summary>
            <param name="rect">The area this QuadTree object will encompass.</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a QuadTree for the specified area.
            </summary>
            <param name="x">The top-left position of the area rectangle.</param>
            <param name="y">The top-right position of the area rectangle.</param>
            <param name="width">The width of the area rectangle.</param>
            <param name="height">The height of the area rectangle.</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.Add(QuadTrees.Common.QuadTreeObject{`0,`1})">
            <summary>
            Add an item to the object list.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.Remove(QuadTrees.Common.QuadTreeObject{`0,`1})">
            <summary>
            Remove an item from the object list.
            </summary>
            <param name="item">The object to remove.</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.Subdivide(System.Boolean)">
            <summary>
            Automatically subdivide this QuadTree and move it's children into the appropriate Quads where applicable.
            </summary>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.Subdivide(System.Drawing.Point,System.Boolean)">
            <summary>
            Manually subdivide this QuadTree and move it's children into the appropriate Quads where applicable.
            </summary>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.GetDestinationTree(QuadTrees.Common.QuadTreeObject{`0,`1})">
            <summary>
            Get the child Quad that would contain an object.
            </summary>
            <param name="item">The object to get a child for.</param>
            <returns></returns>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.Clear">
            <summary>
            Clears the QuadTree of all objects, including any objects living in its children.
            </summary>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.Delete(QuadTrees.Common.QuadTreeObject{`0,`1},System.Boolean)">
            <summary>
            Deletes an item from this QuadTree. If the object is removed causes this Quad to have no objects in its children, it's children will be removed as well.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="clean">Whether or not to clean the tree</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.Insert(QuadTrees.Common.QuadTreeObject{`0,`1},System.Boolean)">
            <summary>
            Insert an item into this QuadTree object.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="canSubdivide"></param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.GetObjects(`2)">
            <summary>
            Get the objects in this tree that intersect with the specified rectangle.
            </summary>
            <param name="searchRect">The Rectangle to find objects in.</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.EnumObjects(`2)">
            <summary>
            Get the objects in this tree that intersect with the specified rectangle.
            </summary>
            <param name="searchRect">The Rectangle to find objects in.</param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.GetObjects(`2,System.Action{`0})">
            <summary>
            Get the objects in this tree that intersect with the specified rectangle.
            </summary>
            <param name="searchRect">The Rectangle to find objects in.</param>
            <param name="put"></param>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeNodeCommon`3.GetAllObjects(System.Action{`0})">
            <summary>
            Get all objects in this Quad, and it's children.
            </summary>
            <param name="put">A reference to a list in which to store the objects.</param>
        </member>
        <member name="T:QuadTrees.Common.QuadTreeObject`2">
            <summary>
            Used internally to attach an Owner to each object stored in the QuadTree
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPointNode"></typeparam>
        </member>
        <member name="P:QuadTrees.Common.QuadTreeObject`2.Data">
            <summary>
            The wrapped data value
            </summary>
        </member>
        <member name="P:QuadTrees.Common.QuadTreeObject`2.Owner">
            <summary>
            The QuadTreeNode that owns this object
            </summary>
        </member>
        <member name="M:QuadTrees.Common.QuadTreeObject`2.#ctor(`0)">
            <summary>
            Wraps the data value
            </summary>
            <param name="data">The data value to wrap</param>
        </member>
        <member name="T:QuadTrees.QTreePoint.IPointQuadStorable">
            <summary>
            Interface to define Rect, so that QuadTree knows how to store the object.
            </summary>
        </member>
        <member name="P:QuadTrees.QTreePoint.IPointQuadStorable.Point">
            <summary>
            The PointF that defines the object's boundaries.
            </summary>
        </member>
        <member name="T:QuadTrees.QTreePoint.QuadTreePointNode`1">
            <summary>
            A QuadTree Object that provides fast and efficient storage of objects in a world space.
            </summary>
            <typeparam name="T">Any object implementing IQuadStorable.</typeparam>
        </member>
        <member name="T:QuadTrees.QuadTreePoint`1">
            <summary>
            A QuadTree Object that provides fast and efficient storage of Points in a world space, queried using Rectangles.
            </summary>
            <typeparam name="T">Any object implementing IQuadStorable.</typeparam>
        </member>
        <member name="T:AABB.Grid">
            <summary>
            Basic spacial hashing of world's boxes.
            </summary>
        </member>
        <member name="T:AABB.Obstacle">
            <summary>
            Represents a physical body in the world that can collide with others.
            </summary>
        </member>
        <member name="T:AABB.IBox">
            <summary>
            Represents a physical body in the world that can collide with others.
            </summary>
        </member>
        <member name="M:AABB.IBox.Move(System.Int32,System.Int32,System.Func{AABB.ICollision,AABB.ICollisionResponse})">
            <summary>
            Tries to move the box to specified coordinates with collisition detection.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:AABB.IBox.Simulate(System.Int32,System.Int32,System.Func{AABB.ICollision,AABB.ICollisionResponse})">
            <summary>
            Simulate the move of the box to specified coordinates with collisition detection. The boxe's position isn't
            altered.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="filter">Filter.</param>
        </member>
        <member name="T:AABB.IObstacle">
            <summary>
            Represents a body in the world that can be collided on.
            </summary>
        </member>
        <member name="P:AABB.IObstacle.X">
            <summary>
            Gets the top left corner X coordinate of the box.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:AABB.IObstacle.Y">
            <summary>
            Gets the top left corner Y coordinate of the box.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:AABB.IObstacle.Width">
            <summary>
            Gets the width of the box.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:AABB.IObstacle.Height">
            <summary>
            Gets the height of the box.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:AABB.IObstacle.Bounds">
            <summary>
            Gets the bounds of the box.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:AABB.ICollision.Box">
            <summary>
            Gets the box that is moving and collides with an other one.
            </summary>
            <value>The box.</value>
        </member>
        <member name="P:AABB.ICollision.Other">
            <summary>
            Gets the other box than being collided by the moving box.
            </summary>
            <value>The other.</value>
        </member>
        <member name="P:AABB.ICollision.Origin">
            <summary>
            Gets the origin of the box move.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="P:AABB.ICollision.Goal">
            <summary>
            Gets the goal position of the box move.
            </summary>
            <value>The goal.</value>
        </member>
        <member name="P:AABB.ICollision.Hit">
            <summary>
            Gets information about the impact point.
            </summary>
            <value>The hit.</value>
        </member>
        <member name="T:AABB.IHit">
            <summary>
            Represents a hit point out of a collision.
            </summary>
        </member>
        <member name="P:AABB.IHit.Box">
            <summary>
            Gets the collided box.
            </summary>
            <value>The box.</value>
        </member>
        <member name="P:AABB.IHit.Normal">
            <summary>
            Gets the normal vector of the collided box side.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="P:AABB.IHit.Amount">
            <summary>
            Gets the amount of movement needed from origin to get the impact position.
            </summary>
            <value>The amount.</value>
        </member>
        <member name="P:AABB.IHit.Position">
            <summary>
            Gets the impact position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="M:AABB.IHit.IsNearest(AABB.IHit,RogueElements.Loc)">
            <summary>
            Indicates whether the hit point is nearer than an other from a given point. Warning: this should only be used
            for multiple calculation of the same box movement (amount is compared first, then distance).
            </summary>
            <returns><c>true</c>, if nearest was ised, <c>false</c> otherwise.</returns>
            <param name="than">Than.</param>
            <param name="from">From.</param>
        </member>
        <member name="T:AABB.IWorld">
            <summary>
            Represents a physical world that contains AABB box colliding bodies.
            </summary>
        </member>
        <member name="M:AABB.IWorld.Update(AABB.IBox,RogueElements.Rect)">
            <summary>
            Update the specified box in the world (needed to be called tu update spacial hash).
            </summary>
            <param name="box">Box.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:AABB.IWorld.FindPossible(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the boxes contained in the given area of the world.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="w">The width.</param>
            <param name="h">The height.</param>
        </member>
        <member name="M:AABB.IWorld.FindPossible(RogueElements.Rect)">
            <summary>
            Find the boxes contained in the given area of the world.
            </summary>
            <param name="area">Area.</param>
        </member>
        <member name="M:AABB.IWorld.Hit(RogueElements.Loc,System.Collections.Generic.IEnumerable{AABB.IObstacle})">
            <summary>
            Queries the world to find the nearest colliding point from a given position.
            </summary>
            <param name="point">Point.</param>
            <param name="ignoring">A collection of boxes that will be ignored during hit test (optionnal).</param>
        </member>
        <member name="M:AABB.IWorld.Hit(RogueElements.Loc,RogueElements.Loc,System.Collections.Generic.IEnumerable{AABB.IObstacle})">
            <summary>
            Queries the world to find the nearest colliding position from an oriented segment.
            </summary>
            <param name="origin">Origin.</param>
            <param name="destination">Destination.</param>
            <param name="ignoring">A collection of boxes that will be ignored during hit test (optionnal).</param>
        </member>
        <member name="M:AABB.IWorld.Hit(RogueElements.Rect,RogueElements.Rect,System.Collections.Generic.IEnumerable{AABB.IObstacle})">
            <summary>
            Queries the world to find the nearest colliding position from a moving rectangle.
            </summary>
            <param name="origin">Origin.</param>
            <param name="destination">Destination.</param>
            <param name="ignoring">Ignoring.</param>
        </member>
        <member name="M:AABB.IWorld.Simulate(AABB.IBox,System.Int32,System.Int32,System.Func{AABB.ICollision,AABB.ICollisionResponse})">
            <summary>
            Simulate the specified box movement without moving it.
            </summary>
            <param name="box">Box.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:AABB.IWorld.DrawDebug(System.Int32,System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32,System.Int32,System.Int32,System.Single},System.Action{AABB.IObstacle},System.Action{System.String,System.Int32,System.Int32,System.Single})">
            <summary>
            Draws the debug layer.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="w">The width.</param>
            <param name="h">The height.</param>
            <param name="drawCell">Draw cell.</param>
            <param name="drawBox">Draw box.</param>
            <param name="drawString">Draw string.</param>
        </member>
        <member name="T:AABB.ICollisionResponse">
            <summary>
            The result of a collision reaction onto a box position.
            </summary>
        </member>
        <member name="P:AABB.ICollisionResponse.Destination">
            <summary>
            Gets the new destination of the box after the collision.
            </summary>
            <value>The destination.</value>
        </member>
        <member name="T:RogueElements.SpawnDict`2">
            <summary>
            Selects an item randomly from a weighted list.
            </summary>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
        </member>
        <member name="T:RogueElements.SpawnRangeDict`2">
            <summary>
            A data structure representing spawn rates of items spread across a range of floors.
            </summary>
            <typeparam name="TV"></typeparam>
        </member>
        <member name="T:C3.XNA.Primitives2D">
            <summary>
            </summary>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawPoints(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a list of connecting points
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            /// <param name="position">Where to position the points</param>
            <param name="points">The points to connect with lines</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.CreateCircle(System.Double,System.Int32)">
            <summary>
            Creates a list of vectors that represents a circle
            </summary>
            <param name="radius">The radius of the circle</param>
            <param name="sides">The number of sides to generate</param>
            <returns>A list of vectors that, if connected, will create a circle</returns>
        </member>
        <member name="M:C3.XNA.Primitives2D.CreateArc(System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a list of vectors that represents an arc
            </summary>
            <param name="radius">The radius of the arc</param>
            <param name="sides">The number of sides to generate in the circle that this will cut out from</param>
            <param name="startingAngle">The starting angle of arc, 0 being to the east, increasing as you go clockwise</param>
            <param name="radians">The radians to draw, clockwise from the starting angle</param>
            <returns>A list of vectors that, if connected, will create an arc</returns>
        </member>
        <member name="M:C3.XNA.Primitives2D.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="rect">The rectangle to draw</param>
            <param name="color">The color to draw the rectangle in</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="rect">The rectangle to draw</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="angle">The angle in radians to draw the rectangle at</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="location">Where to draw</param>
            <param name="size">The size of the rectangle</param>
            <param name="color">The color to draw the rectangle in</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="location">Where to draw</param>
            <param name="size">The size of the rectangle</param>
            <param name="angle">The angle in radians to draw the rectangle at</param>
            <param name="color">The color to draw the rectangle in</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x">The X coord of the left side</param>
            <param name="y">The Y coord of the upper side</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="color">The color to draw the rectangle in</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x">The X coord of the left side</param>
            <param name="y">The Y coord of the upper side</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="angle">The angle of the rectangle in radians</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a rectangle with the thickness provided
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="rect">The rectangle to draw</param>
            <param name="color">The color to draw the rectangle in</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a rectangle with the thickness provided
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="rect">The rectangle to draw</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="thickness">The thickness of the lines</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a rectangle with the thickness provided
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="location">Where to draw</param>
            <param name="size">The size of the rectangle</param>
            <param name="color">The color to draw the rectangle in</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a rectangle with the thickness provided
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="location">Where to draw</param>
            <param name="size">The size of the rectangle</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="thickness">The thickness of the line</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x1">The X coord of the first point</param>
            <param name="y1">The Y coord of the first point</param>
            <param name="x2">The X coord of the second point</param>
            <param name="y2">The Y coord of the second point</param>
            <param name="color">The color to use</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x1">The X coord of the first point</param>
            <param name="y1">The Y coord of the first point</param>
            <param name="x2">The X coord of the second point</param>
            <param name="y2">The Y coord of the second point</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the line</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <param name="color">The color to use</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the line</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="point">The starting point</param>
            <param name="length">The length of the line</param>
            <param name="angle">The angle of this line from the starting point in radians</param>
            <param name="color">The color to use</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="point">The starting point</param>
            <param name="length">The length of the line</param>
            <param name="angle">The angle of this line from the starting point</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the line</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Draw a circle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="sides">The number of sides to generate</param>
            <param name="color">The color of the circle</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draw a circle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="sides">The number of sides to generate</param>
            <param name="color">The color of the circle</param>
            <param name="thickness">The thickness of the lines used</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Draw a circle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x">The center X of the circle</param>
            <param name="y">The center Y of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="sides">The number of sides to generate</param>
            <param name="color">The color of the circle</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Int32,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draw a circle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x">The center X of the circle</param>
            <param name="y">The center Y of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="sides">The number of sides to generate</param>
            <param name="color">The color of the circle</param>
            <param name="thickness">The thickness of the lines used</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawArc(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Single,System.Single,Microsoft.Xna.Framework.Color)">
            <summary>
            Draw a arc
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="center">The center of the arc</param>
            <param name="radius">The radius of the arc</param>
            <param name="sides">The number of sides to generate</param>
            <param name="startingAngle">The starting angle of arc, 0 being to the east, increasing as you go clockwise</param>
            <param name="radians">The number of radians to draw, clockwise from the starting angle</param>
            <param name="color">The color of the arc</param>
        </member>
        <member name="M:C3.XNA.Primitives2D.DrawArc(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draw a arc
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="center">The center of the arc</param>
            <param name="radius">The radius of the arc</param>
            <param name="sides">The number of sides to generate</param>
            <param name="startingAngle">The starting angle of arc, 0 being to the east, increasing as you go clockwise</param>
            <param name="radians">The number of radians to draw, clockwise from the starting angle</param>
            <param name="color">The color of the arc</param>
            <param name="thickness">The thickness of the arc</param>
        </member>
    </members>
</doc>
